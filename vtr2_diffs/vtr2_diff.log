diff --git a/.catkin_tools/VERSION b/.catkin_tools/VERSION
index f7abe273d..c8a5397fb 100644
--- a/.catkin_tools/VERSION
+++ b/.catkin_tools/VERSION
@@ -1 +1 @@
-0.4.2
\ No newline at end of file
+0.4.5
\ No newline at end of file
diff --git a/asrl__analysis/CMakeLists.txt b/asrl__analysis/CMakeLists.txt
index a35c87f42..683929c6b 100644
--- a/asrl__analysis/CMakeLists.txt
+++ b/asrl__analysis/CMakeLists.txt
@@ -6,7 +6,7 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 
 ###### IMPORT DEPENDENCIES (build_depends) ######
 
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(Protobuf REQUIRED)
 find_package(OpenMP REQUIRED)
 set_openmp_flags()
@@ -14,17 +14,20 @@ set_openmp_flags()
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
 
 find_package(catkin REQUIRED COMPONENTS
-  asrl__common asrl__messages asrl__planning asrl__pose_graph asrl__vision 
+  asrl__common asrl__messages asrl__planning asrl__pose_graph asrl__vision
   robochunk_base robochunk_msgs robochunk_util robochunk_comms babelfish_robochunk_translator)
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 # Export the python components of this package
 catkin_python_setup()
 
-catkin_package(INCLUDE_DIRS include 
+catkin_package(INCLUDE_DIRS include
   LIBRARIES ${PROJECT_NAME}
   DEPENDS Robochunk Protobuf
-  CATKIN_DEPENDS 
-      asrl__common asrl__messages asrl__planning asrl__pose_graph asrl__vision 
+  CATKIN_DEPENDS
+      asrl__common asrl__messages asrl__planning asrl__pose_graph asrl__vision
       robochunk_base robochunk_msgs robochunk_util robochunk_comms babelfish_robochunk_translator)
 
 file(GLOB_RECURSE INCLUDES ${CMAKE_CURRENT_SOURCE_DIR}/include/ *.h *.hpp *.inl)
diff --git a/asrl__cmake/AsrlIncludes.cmake.in b/asrl__cmake/AsrlIncludes.cmake.in
index ca3e7e324..0a3534b3a 100644
--- a/asrl__cmake/AsrlIncludes.cmake.in
+++ b/asrl__cmake/AsrlIncludes.cmake.in
@@ -18,16 +18,17 @@ if (CMAKE_COMPILER_IS_GNUCC)
       OUTPUT_VARIABLE RELEASE_CODENAME
       OUTPUT_STRIP_TRAILING_WHITESPACE
   )
-  
+
   # There are way too many warnings as errors problems on system headers for 16.04/xenial
   # so we have to add this as a compile option only if using 14.04/trusty
   if(${RELEASE_CODENAME} MATCHES "trusty")
-    add_compile_options(-Werror)  
+    add_compile_options(-Werror)
   endif()
 
   # ...except for these ones.  They are EVERYWHERE, and aren't actually that useful/important
   add_compile_options(-Wno-long-long -Wno-unused-function -Wno-reorder -Wno-unused-parameter)
-  
+  add_compile_options(-Wno-return-type -Wno-virtual-move-assign)
+
   # we suck at template instantiation. Help pls
   #add_compile_options(-frepo)
 
@@ -39,7 +40,7 @@ if (CMAKE_COMPILER_IS_GNUCC)
   #set(CMAKE_CXX_STANDARD_LIBRARIES -lasan)
 
   if (GCC_VERSION VERSION_GREATER 4.8 OR GCC_VERSION VERSION_EQUAL 4.8)
-    add_compile_options(-std=c++11)
+    add_compile_options(-std=c++14)
     set(CXX11 TRUE)
   else()
     # gcc46 does not support c++11, and the linker on relevant systems doesn't understand AVX
diff --git a/asrl__cmake/bin/build_proto_pkg.py b/asrl__cmake/bin/build_proto_pkg.py
index df5b190a9..64c22391f 100755
--- a/asrl__cmake/bin/build_proto_pkg.py
+++ b/asrl__cmake/bin/build_proto_pkg.py
@@ -22,11 +22,15 @@ else:
     import subprocess
 
 # Config
-parser = argparse.ArgumentParser(description='Builds a protobuf tree into a valid python package')
+parser = argparse.ArgumentParser(
+    description='Builds a protobuf tree into a valid python package')
 parser.add_argument('pkg', type=str, help='Name of package')
-parser.add_argument('dir', type=str, help='Root directory containing input and output')
-parser.add_argument('--out', '-o', type=str, nargs='?', help='Extra output directory prefix', default='')
-parser.add_argument('--robo', '-r', type=str, nargs='?', help='Path to robo includes', default='')
+parser.add_argument(
+    'dir', type=str, help='Root directory containing input and output')
+parser.add_argument('--out', '-o', type=str, nargs='?',
+                    help='Extra output directory prefix', default='')
+parser.add_argument('--robo', '-r', type=str, nargs='?',
+                    help='Path to robo includes', default='')
 
 args = parser.parse_args()
 
@@ -40,7 +44,7 @@ proto_path = os.path.join(base, 'proto')
 out_path = os.path.join(base, args.out, PKG_NAME)
 raw_path = os.path.join(out_path, 'proto')
 
-print "  > [Proto2Py] Running with input: " + proto_path
+print("  > [Proto2Py] Running with input: " + proto_path)
 
 # Relevant file paths
 proto_init = os.path.join(raw_path, '__init__.py')
@@ -71,14 +75,17 @@ def get_classes(file_path):
         text = g.read()
 
     # Hackery: finds names by looking for "message" and "enum" declarations
-    matches = list(re.finditer(r"""^\s*(?:enum|message)\s+([a-zA-z0-9_]+)""", text, flags=re.MULTILINE))
+    matches = list(re.finditer(
+        r"""^\s*(?:enum|message)\s+([a-zA-z0-9_]+)""", text, flags=re.MULTILINE))
     # Find the location of all closing braces in the file
-    closes = [m.start() for m in re.finditer(r"""\}""", text, flags=re.MULTILINE)]
+    closes = [m.start() for m in re.finditer(
+        r"""\}""", text, flags=re.MULTILINE)]
 
     rval = []
     for idx, match in enumerate(matches):
         # The number of messages closed is the number of close braces that have come before this match's start position
-        nclosed = next(i for i, pos in enumerate(closes) if pos > match.start())
+        nclosed = next(i for i, pos in enumerate(
+            closes) if pos > match.start())
         # The number of messages opened is the match index, as they are sequential.  If these numbers are equal then we
         # are not inside another message definition, and should return this class
         if idx == nclosed:
@@ -86,6 +93,7 @@ def get_classes(file_path):
 
     return rval
 
+
 # First pass: build up include directory list and create folders/__init__ files
 include_paths = [ROBOCHUNK_PATH]
 file_names = []
@@ -110,7 +118,7 @@ for rpath, files in folders.items():
         with open(init_path, 'w') as f:
             f.write("# THIS FILE IS AUTO-GENERATED; DO NOT EDIT IT.\n\n")
 
-    print "  > [Proto2Py] Building subpackage " + rpath + " with messages: " + ", ".join(files)
+    print("  > [Proto2Py] Building subpackage " + rpath + " with messages: " + ", ".join(files))
 
     # Generate the __init__.py files
     with open(pkg_path, 'w') as f:
@@ -140,17 +148,19 @@ with open(base_init, 'w') as f:
     f.write("__all__ = ['" + "', '".join(module_names) + "']\n")
 
 # Add a "-I" between every entry to make these command line arguments
-includes = sum([list(x) for x in zip(["-I"]*len(include_paths), include_paths)], [])
+includes = sum([list(x)
+                for x in zip(["-I"]*len(include_paths), include_paths)], [])
 args = ['protoc', '--python_out', raw_path] + includes
 
 # Call the protobuf compiler to make the message files
-print "  > [Proto2Py] Compiling messages..."
+print("  > [Proto2Py] Compiling messages...")
 all_files = sum([[os.path.join(proto_path, rpath, filename) for filename in files]
                  for rpath, files in folders.items()], [])
 result = subprocess.call(args + all_files)
 
 if result:
-    raise RuntimeError("Compiling protobuf failed with exit code " + str(result))
+    raise RuntimeError(
+        "Compiling protobuf failed with exit code " + str(result))
 
 
 # I'm sorry... The protoc compiler assumes that all python files are generated into the same directory.  We use a
@@ -158,10 +168,12 @@ if result:
 def clean_import(msg_path, name):
     match = "^import " + name
     repl = "from robochunk.proto import " + name + " as " + name
-    args = ['find', msg_path, '-type', 'f', '-exec', 'sed', '-i', '-e', 's/' + match + "/" + repl + '/g', '{}', ';']
+    args = ['find', msg_path, '-type', 'f', '-exec', 'sed',
+            '-i', '-e', 's/' + match + "/" + repl + '/g', '{}', ';']
     subprocess.call(args)
 
-print "  > [Proto2Py] Cleaning up nasty includes :/ (x" + str(len(robochunk_msgs)) + ")"
+
+print("  > [Proto2Py] Cleaning up nasty includes :/ (x" + str(len(robochunk_msgs)) + ")")
 
 for cls in robochunk_msgs:
     clean_import(raw_path, cls)
diff --git a/asrl__common/CMakeLists.txt b/asrl__common/CMakeLists.txt
index 81d792d68..788d0376e 100644
--- a/asrl__common/CMakeLists.txt
+++ b/asrl__common/CMakeLists.txt
@@ -9,11 +9,14 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 #find_package([system_dependency_1] REQUIRED)
 #find_package(lgmath REQUIRED)
 find_package(OpenCV REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 #find_package(catch REQUIRED)
 #find_package(date REQUIRED)
 #find_package(easyloggingpp REQUIRED)
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 ###### ROS ######
 
 # This is a top-level algorithm package that is ros-agnostic
@@ -31,7 +34,7 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
                    INCLUDE_DIRS include ${EIGEN3_INCLUDE_DIR}
diff --git a/asrl__common/include/asrl/common/utils/CommonMacros.hpp b/asrl__common/include/asrl/common/utils/CommonMacros.hpp
index 8aae55cd6..c22b28e24 100644
--- a/asrl__common/include/asrl/common/utils/CommonMacros.hpp
+++ b/asrl__common/include/asrl/common/utils/CommonMacros.hpp
@@ -191,7 +191,6 @@ struct hash<Type> { \
 
 #define EXTEND_HASH_TEMPLATED(Type, A) \
 namespace std { \
-template<> \
 template<class A> \
 struct hash<Type<A> > { \
   size_t operator()(const Type<A> &T) const { return T.hash(); } \
diff --git a/asrl__control/asrl__control__path_tracker/CMakeLists.txt b/asrl__control/asrl__control__path_tracker/CMakeLists.txt
index a932eda13..c07e1e4f7 100644
--- a/asrl__control/asrl__control__path_tracker/CMakeLists.txt
+++ b/asrl__control/asrl__control__path_tracker/CMakeLists.txt
@@ -18,7 +18,10 @@ find_package(
     asrl__common
     asrl__messages
 )
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
+
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
 
 # add all files to a dummy target for Qt Creator
 file(GLOB_RECURSE REPO_FILES "*")
diff --git a/asrl__control/asrl__control__path_tracker/include/asrl/path_tracker/implementation/pathUtilities.cpp b/asrl__control/asrl__control__path_tracker/include/asrl/path_tracker/implementation/pathUtilities.cpp
index 533b8ad74..feb16cc50 100644
--- a/asrl__control/asrl__control__path_tracker/include/asrl/path_tracker/implementation/pathUtilities.cpp
+++ b/asrl__control/asrl__control__path_tracker/include/asrl/path_tracker/implementation/pathUtilities.cpp
@@ -782,7 +782,7 @@ namespace asrl {
         if (start < numPoses){
             int end;
 
-            float scheduled_speed = std::min(fabs(path.scheduled_speed[start]), fabs(path.adjusted_scheduled_speed[start]));
+            double scheduled_speed = std::min(fabs(path.scheduled_speed[start]), fabs(path.adjusted_scheduled_speed[start]));
             target_speed = getSign(path.scheduled_speed[start])*std::min(fabs(scheduled_speed), fabs(target_speed));
 
             end = std::min(start+length, numPoses);
@@ -1150,7 +1150,7 @@ namespace asrl {
             tf::Point xhat(1,0,0);
 
             // Get the next path pose
-            getTfPoint(path.poses[local_path.current_poseNum],p_0_k_0); 
+            getTfPoint(path.poses[local_path.current_poseNum],p_0_k_0);
             getTfQuaternion(path.poses[local_path.current_poseNum],q_0_k_0);
             tf::Transform C_0_k(q_0_k_0);
 
diff --git a/asrl__control/asrl__control__path_tracker_mpc/CMakeLists.txt b/asrl__control/asrl__control__path_tracker_mpc/CMakeLists.txt
index ae65f6e94..cc4eda0b8 100644
--- a/asrl__control/asrl__control__path_tracker_mpc/CMakeLists.txt
+++ b/asrl__control/asrl__control__path_tracker_mpc/CMakeLists.txt
@@ -20,9 +20,12 @@ find_package(
     asrl__control__path_tracker
 )
 
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(date REQUIRED)
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 # Definitions
 add_definitions(${EIGEN_DEFINITIONS})
 
@@ -36,7 +39,7 @@ generate_dynamic_reconfigure_options(
 include_directories(
   include
   ${date_INCLUDE_DIRS}
-  ${EIGEN3_INCLUDE_DIR} 
+  ${EIGEN3_INCLUDE_DIR}
   ${catkin_INCLUDE_DIRS}
   ${Boost_INCLUDE_DIR}
   ${Boost_INCLUDE_DIRS}
diff --git a/asrl__messages/CMakeLists.txt b/asrl__messages/CMakeLists.txt
index 707eeda15..911f3809a 100644
--- a/asrl__messages/CMakeLists.txt
+++ b/asrl__messages/CMakeLists.txt
@@ -10,7 +10,10 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 find_package(cmake_modules REQUIRED)
 find_package(Protobuf REQUIRED)
 find_package(OpenCV REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
+
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
 
 ## Define the protobuf generation function
 include(GenerateProto NO_POLICY_SCOPE)
@@ -24,14 +27,14 @@ if (CATKIN_ENABLED)
 
     # Adding packages as components adds them to our ${catkin_INCLUDE_DIRS} and ${catkin_LIBRARIES} variables.
     find_package(catkin REQUIRED
-                 COMPONENTS  roscpp 
-                             message_generation 
-                             stereo_msgs 
-                             sensor_msgs 
-                             std_msgs 
-                             actionlib_msgs 
-                             asrl__common 
-                             cv_bridge 
+                 COMPONENTS  roscpp
+                             message_generation
+                             stereo_msgs
+                             sensor_msgs
+                             std_msgs
+                             actionlib_msgs
+                             asrl__common
+                             cv_bridge
                              image_transport
                              robochunk_msgs
     )
@@ -61,7 +64,7 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
                    INCLUDE_DIRS include ${CATKIN_DEVEL_PREFIX}/${CATKIN_GLOBAL_INCLUDE_DESTINATION}
@@ -95,7 +98,7 @@ GENERATE_PROTO(PROTO_SRCS
 
 ## Generate Protobuf messages for Python
 execute_process(COMMAND "${ASRL_CMAKE_DIR}/bin/build_proto_pkg.py"
-                        "${PROJECT_NAME}" "${CMAKE_CURRENT_SOURCE_DIR}" 
+                        "${PROJECT_NAME}" "${CMAKE_CURRENT_SOURCE_DIR}"
                         "--robo" "${robochunk_msgs_DEVEL_PREFIX}/include/robochunk_msgs/"
                         "--out" "src" RESULT_VARIABLE _result)
 if (${_result})
diff --git a/asrl__navigation/CMakeLists.txt b/asrl__navigation/CMakeLists.txt
index fd4572746..b4d59659d 100644
--- a/asrl__navigation/CMakeLists.txt
+++ b/asrl__navigation/CMakeLists.txt
@@ -7,7 +7,7 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 ###### IMPORT DEPENDENCIES (build_depends) ######
 ## System ##
 #find_package([system_dependency_1] REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(Protobuf REQUIRED)
 find_package(OpenCV REQUIRED)
 find_package(PCL REQUIRED)
@@ -19,6 +19,8 @@ set_openmp_flags()
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
 
 ###### ROS ######
 # This is a top-level algorithm package that is ros-agnostic
@@ -28,10 +30,10 @@ if (CATKIN_ENABLED)
     # Adding packages as components adds them to our ${catkin_INCLUDE_DIRS} and ${catkin_LIBRARIES} variables.
     find_package(catkin REQUIRED
                   COMPONENTS asrl__messages
-                             asrl__vision 
-                             asrl__common 
-                             asrl__pose_graph 
-                             asrl__planning 
+                             asrl__vision
+                             asrl__common
+                             asrl__pose_graph
+                             asrl__planning
                              asrl__interface
                              robochunk_base robochunk_msgs robochunk_util robochunk_comms babelfish_robochunk_translator
                              asrl__terrain_assessment
@@ -63,9 +65,9 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
-    catkin_package(INCLUDE_DIRS include 
+    catkin_package(INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}
                    ##Dependencies (build_depends and run_depends)
                    DEPENDS OpenCV Robochunk Protobuf LGMath#[system_dependency]
@@ -95,7 +97,7 @@ if (CATKIN_ENABLED)
     else(${gpusurf_FOUND})
       add_definitions(-DGPUSURF_ENABLED=0)
     endif(${gpusurf_FOUND})
-    
+
     # Find LibElas
     find_package(libelas QUIET) # Not required because we might not build with it
     if(${libelas_FOUND})
@@ -197,7 +199,7 @@ target_link_libraries(ChangeDetection ${PROJECT_NAME}
 
 add_executable(StateMachineExample src/examples/StateMachineExample.cpp)
 target_link_libraries(StateMachineExample ${PROJECT_NAME}
-                                 ${catkin_LIBRARIES} 
+                                 ${catkin_LIBRARIES}
                                  ${PROTOBUF_LIBRARIES}
                                  ${Steam_LIBRARIES}
                                  ${OpenCV_LIBRARIES})
diff --git a/asrl__navigation/src/modules/matching/ASRLMonoMatcherModule.cpp b/asrl__navigation/src/modules/matching/ASRLMonoMatcherModule.cpp
index cf0e0a041..170a238e8 100644
--- a/asrl__navigation/src/modules/matching/ASRLMonoMatcherModule.cpp
+++ b/asrl__navigation/src/modules/matching/ASRLMonoMatcherModule.cpp
@@ -4,7 +4,7 @@
 #include <asrl/vision/Types.hpp>
 #include <opencv2/core/version.hpp>
 #include <opencv2/opencv_modules.hpp>
-#if CV_MAJOR_VERSION == 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
+#if CV_MAJOR_VERSION >= 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
 #include <opencv2/cudafeatures2d.hpp>
 #endif
 
@@ -73,7 +73,7 @@ void ASRLMonoMatcherModule::matchChannelFeaturesGPU(MapCache & mdata, const visi
   // make some temporary matches
   std::vector<std::vector<cv::DMatch>> knnmatches;
 
-#if CV_MAJOR_VERSION == 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
+#if CV_MAJOR_VERSION >= 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
   // make a GPU based matcher
   cv::Ptr<cv::cuda::DescriptorMatcher> cudabfmatcher;
   if(qry_channel_feat.cameras[0].feat_type.impl == asrl::vision::FeatureImpl::OPENCV_ORB) {
@@ -327,7 +327,7 @@ unsigned ASRLMonoMatcherModule::matchFeatures(QueryCache & qdata, MapCache & mda
   // make sure the raw matches are empty (we may have used this function before)
   mdata.raw_matches.clear();
 
-  // output matches 
+  // output matches
   auto &matches = *mdata.raw_matches.fallback();
 
   // grab the features contained in the query frame.
diff --git a/asrl__navigation/src/modules/matching/MelMatcherModule.cpp b/asrl__navigation/src/modules/matching/MelMatcherModule.cpp
index df1f5b7a5..ec103e419 100644
--- a/asrl__navigation/src/modules/matching/MelMatcherModule.cpp
+++ b/asrl__navigation/src/modules/matching/MelMatcherModule.cpp
@@ -7,7 +7,7 @@
 // opencv definitions
 #include <opencv2/core/version.hpp>   // defines CV_MAJOR_VERSION
 #include <opencv2/opencv_modules.hpp> // defines HAVE_OPENCV_CUDAFEATURES2D
-#if CV_MAJOR_VERSION == 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
+#if CV_MAJOR_VERSION >= 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
 #include <opencv2/cudafeatures2d.hpp>
 #endif
 
@@ -23,7 +23,7 @@ void MelMatcherModule::setConfig(std::shared_ptr<Config> & config) {
   config_ = config;
 }
 
-/// @brief This module matches a query stereo frame to a map stereo frame and fills in the inlier 
+/// @brief This module matches a query stereo frame to a map stereo frame and fills in the inlier
 ///        between them.
 void MelMatcherModule::run(QueryCache & qdata, MapCache & mdata,
                            const std::shared_ptr<const Graph> & graph) {
@@ -74,7 +74,7 @@ void MelMatcherModule::run(QueryCache & qdata, MapCache & mdata,
 
 
 /// @brief Initialize the matches data structure.
-void MelMatcherModule::initializeMatches(const std::vector<LandmarkFrame> & query_landmarks, 
+void MelMatcherModule::initializeMatches(const std::vector<LandmarkFrame> & query_landmarks,
                                          std::vector<vision::RigMatches> &matches) {
   // initialize the matches
   for(uint32_t rig_idx = 0; rig_idx < query_landmarks.size(); ++rig_idx) {
@@ -115,7 +115,7 @@ void MelMatcherModule::matchAcrossExperiences(QueryCache & qdata, MapCache & mda
   for(; visited < localization_map->numberOfVertices() && map_itr != graph->end(); ++map_itr) {
     if (!localization_map->contains(map_itr->v()->id())) continue;
     // check for breaking criteria
-    if(total_match_count_ >= config_->target_match_count || 
+    if(total_match_count_ >= config_->target_match_count ||
        timer_.elapsedMs() > config_->time_allowance) {
        break;
     }
@@ -136,7 +136,7 @@ void MelMatcherModule::matchVertex(QueryCache & qdata, MapCache & mdata, Vertex:
     auto map_rig_landmarks = vertex->retrieveKeyframeData<vision_msgs::RigLandmarks>("/" + rig_name + "/landmarks");
     if(map_rig_landmarks == nullptr) {
       LOG(ERROR) << "landmarks at " << vertex->id() << " could not be loaded";
-      return; 
+      return;
     }
     for(uint32_t channel_idx = 0; channel_idx < query_rig_landmarks.channels.size(); ++channel_idx) {
       const auto &map_channel_lm = map_rig_landmarks->channels().Get(channel_idx);
@@ -155,7 +155,7 @@ void MelMatcherModule::matchVertex(QueryCache & qdata, MapCache & mdata, Vertex:
 }
 
 /// @brief Finds matches between query and map for a given channel.
-void MelMatcherModule::matchChannel(MapCache &mdata, const vision::LandmarkId &channel_id, const   
+void MelMatcherModule::matchChannel(MapCache &mdata, const vision::LandmarkId &channel_id, const
                                     vision_msgs::ChannelLandmarks & map_channel_lm) {
   const auto &query_rig_data = (*mdata.map_landmarks)[channel_id.rig];
   const auto &query_channel_obs = query_rig_data.observations.channels[channel_id.channel];
@@ -251,7 +251,7 @@ void MelMatcherModule::matchChannelGPU(MapCache &mdata, const vision::LandmarkId
   // make some temporary matches
   std::vector<std::vector<cv::DMatch> > knnmatches;
 
-#if CV_MAJOR_VERSION == 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
+#if CV_MAJOR_VERSION >= 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
 
   // a container for the CPU descriptors to upload to the GPU
   cv::Mat map_cpu_descs;
@@ -536,7 +536,7 @@ int MelMatcherModule::matchQueryKeypoint(MapCache &mdata, const vision::Landmark
 inline bool MelMatcherModule::potential_match(const cv::KeyPoint &query_lm_info,
                                        const asrl::vision_msgs::FeatureInfo &lm_info_map,
                                        const int &map_track_length,
-                                       const cv::Point &query_kp, const Eigen::Vector2d &map_kp, 
+                                       const cv::Point &query_kp, const Eigen::Vector2d &map_kp,
                                        const double &query_depth, const double &map_depth,
                                        const asrl::vision_msgs::Match & lm_track) {
 
@@ -611,7 +611,7 @@ void MelMatcherModule::visualizeImpl(QueryCache &, MapCache &, const std::shared
 }
 /// @brief Update the graph with optimized transforms
 void MelMatcherModule::updateGraph(QueryCache &, MapCache &, const std::shared_ptr<Graph> &, VertexId) {
-  
+
 }
 
 }
diff --git a/asrl__navigation/src/modules/ransac/InitMonoRansacModule.cpp b/asrl__navigation/src/modules/ransac/InitMonoRansacModule.cpp
index d8ee11712..f77d55464 100644
--- a/asrl__navigation/src/modules/ransac/InitMonoRansacModule.cpp
+++ b/asrl__navigation/src/modules/ransac/InitMonoRansacModule.cpp
@@ -23,7 +23,7 @@ InitMonoRansacModule::InitMonoRansacModule() {
 void InitMonoRansacModule::run(QueryCache & qdata, MapCache & mdata, const std::shared_ptr<const Graph> &graph) {
 #if CV_MAJOR_VERSION == 2
   std::cerr << "WARNING: You are using InitMonoRansacModule with OpenCV2.4, which is incompatible. This module will not execute. Please upgrade to OpenCV 3.X" << std::endl;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   // if the map is initialized, there is nothing for the initilization module to do
   if (*mdata.map_status != MAP_NEW) {
     return;
diff --git a/asrl__offline_tools/CMakeLists.txt b/asrl__offline_tools/CMakeLists.txt
index 9f73dc78f..fa1fd84c4 100644
--- a/asrl__offline_tools/CMakeLists.txt
+++ b/asrl__offline_tools/CMakeLists.txt
@@ -18,6 +18,8 @@ set_openmp_flags()
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
 
 ###### ROS ######
 # This is a top-level algorithm package that is ros-agnostic
@@ -28,11 +30,11 @@ if (CATKIN_ENABLED)
     find_package(catkin REQUIRED
                   COMPONENTS asrl__navigation
                              asrl__messages
-                             asrl__vision 
-                             asrl__common 
-                             asrl__pose_graph 
-                             asrl__planning 
-                             asrl__interface 
+                             asrl__vision
+                             asrl__common
+                             asrl__pose_graph
+                             asrl__planning
+                             asrl__interface
                              robochunk_base robochunk_msgs robochunk_util robochunk_comms babelfish_robochunk_translator
                              asrl__terrain_assessment
                              cv_bridge
@@ -47,9 +49,9 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
-    catkin_package(INCLUDE_DIRS include 
+    catkin_package(INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}
                    ##Dependencies (build_depends and run_depends)
                    DEPENDS OpenCV Protobuf LGMath#[system_dependency]
@@ -96,7 +98,7 @@ add_custom_target(${PROJECT_NAME}__params SOURCES ${PARAMS})
 #add_library(${PROJECT_NAME}
 #  ${MODULE_SRC})
 
-#target_link_libraries(${PROJECT_NAME} 
+#target_link_libraries(${PROJECT_NAME}
 #                      ${catkin_LIBRARIES}
 #                      ${OpenCV_LIBRARIES}
 #                      yaml-cpp)
@@ -133,7 +135,7 @@ target_link_libraries(GimbalVO
                                ${Steam_LIBRARIES}
                                ${OpenCV_LIBRARIES}
                                ${PROJ4_LIBRARIES})
-                               
+
 add_executable(GimbalLoc src/examples/gimbal_loc.cpp)
 target_link_libraries(GimbalLoc
                                ${catkin_LIBRARIES}
@@ -151,7 +153,7 @@ target_link_libraries(LancasterVO
                                ${Steam_LIBRARIES}
                                ${OpenCV_LIBRARIES}
                                ${PROJ4_LIBRARIES})
-                               
+
 add_executable(LancasterVO_ROSBAG src/examples/lancaster_vo_rosbag.cpp)
 target_link_libraries(LancasterVO_ROSBAG
                                ${catkin_LIBRARIES}
@@ -167,22 +169,22 @@ target_link_libraries(LancasterLoc
                                ${OpenCV_LIBRARIES})
 
 add_executable(BagConverter src/conversion/bag_converter.cpp)
-target_link_libraries(BagConverter 
-                      ${catkin_LIBRARIES} 
+target_link_libraries(BagConverter
+                      ${catkin_LIBRARIES}
                       ${PROTOBUF_LIBRARIES}
                       ${Eigen_LIBRARIES})
 add_dependencies(BagConverter ${catkin_EXPORTED_TARGETS} ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
 add_executable(LancasterImageFixer src/conversion/lancaster_image_fixer.cpp)
-target_link_libraries(LancasterImageFixer 
-                      ${catkin_LIBRARIES} 
+target_link_libraries(LancasterImageFixer
+                      ${catkin_LIBRARIES}
                       ${PROTOBUF_LIBRARIES}
                       ${OpenCV_LIBRARIES})
 add_dependencies(LancasterImageFixer ${catkin_EXPORTED_TARGETS} ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
 add_executable(ChunkToImages src/conversion/chunk_to_images.cpp)
-target_link_libraries(ChunkToImages 
-                      ${catkin_LIBRARIES} 
+target_link_libraries(ChunkToImages
+                      ${catkin_LIBRARIES}
                       ${PROTOBUF_LIBRARIES}
                       ${Robochunk_LIBRARIES}
                       ${OpenCV_LIBRARIES})
diff --git a/asrl__path_tracker/CMakeLists.txt b/asrl__path_tracker/CMakeLists.txt
index 4b855475b..0c4bed326 100644
--- a/asrl__path_tracker/CMakeLists.txt
+++ b/asrl__path_tracker/CMakeLists.txt
@@ -7,7 +7,7 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 ###### IMPORT DEPENDENCIES (build_depends) ######
 ## System ##
 #find_package([system_dependency_1] REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(Protobuf REQUIRED)
 
 # find OpenMP - multithreading package
@@ -16,6 +16,9 @@ set_openmp_flags()
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 # ROS packages
 find_package(catkin_optional REQUIRED) # co_* helper functions
 co_find(asrl__common
diff --git a/asrl__path_tracker/include/asrl/path_tracker/robust_mpc/models/original_gaussian_process.hpp b/asrl__path_tracker/include/asrl/path_tracker/robust_mpc/models/original_gaussian_process.hpp
index e0776b4c9..533d8bb85 100644
--- a/asrl__path_tracker/include/asrl/path_tracker/robust_mpc/models/original_gaussian_process.hpp
+++ b/asrl__path_tracker/include/asrl/path_tracker/robust_mpc/models/original_gaussian_process.hpp
@@ -15,6 +15,7 @@ Functions:      To do
 #include <sstream>
 #include <algorithm>
 #include <string>
+#include <numeric>
 #include <Eigen/Dense>
 #include <ros/ros.h>
 #include <yaml-cpp/yaml.h>
diff --git a/asrl__path_tracker/src/robust_mpc/experience/experience_recommendation.cpp b/asrl__path_tracker/src/robust_mpc/experience/experience_recommendation.cpp
index cde8afcbf..343bec612 100644
--- a/asrl__path_tracker/src/robust_mpc/experience/experience_recommendation.cpp
+++ b/asrl__path_tracker/src/robust_mpc/experience/experience_recommendation.cpp
@@ -1,4 +1,5 @@
 #include <asrl/path_tracker/robust_mpc/experience/experience_recommendation.hpp>
+#include <random>
 
 namespace asrl {
 namespace path_tracker {
@@ -115,7 +116,7 @@ void ExperienceRecommendation::expRecLoop() {
   while (state_ != State::STOP) {
     // Update prediction GP if the live priviliged vertex has advanced
     loop_timer_.reset();
-    if (state_ == State::RUN and v_state_.isValid() and 
+    if (state_ == State::RUN and v_state_.isValid() and
         (v_state_.refreshFixedVertex() or !params_.wait_for_vertex_update)) {
       updateTrailingWindow();
       fitPredGp();
diff --git a/asrl__path_tracker/src/robust_mpc/mpc/mpc_base.cpp b/asrl__path_tracker/src/robust_mpc/mpc/mpc_base.cpp
index ca45f06b3..7bcf8564a 100644
--- a/asrl__path_tracker/src/robust_mpc/mpc/mpc_base.cpp
+++ b/asrl__path_tracker/src/robust_mpc/mpc/mpc_base.cpp
@@ -330,7 +330,7 @@ void PathTrackerMPC::loadMpcParams() {
 
   if (mpc_params_.flg_en_disturbance_estimation) {
     LOG(INFO) << "LEARNING MPC Enabled";
-  } else { 
+  } else {
     LOG(INFO) << "LEARNING MPC Disabled";
   }
 
@@ -1103,7 +1103,7 @@ void PathTrackerMPC::computeCommandFdbk(float &linear_speed_cmd, float &angular_
     getErrorToEnd(linear_distance, angular_distance);
     double target_lin_speed_tmp = utils::getSign(path_->scheduled_speed_[local_path.current_pose_num]) * 0.3;
     target_linear_speed = -1 * gain_schedule.end_x_error_gain * linear_distance;
-    target_linear_speed = std::min(fabs(target_linear_speed), fabs(target_lin_speed_tmp))
+    target_linear_speed = std::min(static_cast<double>(fabs(target_linear_speed)), fabs(target_lin_speed_tmp))
                           * utils::getSign(target_linear_speed);
   }
   else if (use_dir_sw_ctrl) {
diff --git a/asrl__path_tracker/src/robust_mpc/mpc/mpc_path.cpp b/asrl__path_tracker/src/robust_mpc/mpc/mpc_path.cpp
index dfc0690cb..fd378b0b4 100644
--- a/asrl__path_tracker/src/robust_mpc/mpc/mpc_path.cpp
+++ b/asrl__path_tracker/src/robust_mpc/mpc/mpc_path.cpp
@@ -1509,7 +1509,7 @@ void MpcPath::adjustSpeedProfileHoldSpeed(int start, int length, double target_s
     if (start < numPoses){
         int end;
 
-        float scheduled_start_speed = std::min(fabs(original_scheduled_speed_[start]), fabs(scheduled_speed_[start]));
+        double scheduled_start_speed = std::min(fabs(original_scheduled_speed_[start]), fabs(scheduled_speed_[start]));
         target_speed = utils::getSign(original_scheduled_speed_[start])*std::min(fabs(scheduled_start_speed), fabs(target_speed));
 
         end = std::min(start+length, numPoses);
diff --git a/asrl__planning/CMakeLists.txt b/asrl__planning/CMakeLists.txt
index e17937814..3fb15bc4c 100644
--- a/asrl__planning/CMakeLists.txt
+++ b/asrl__planning/CMakeLists.txt
@@ -3,6 +3,8 @@ cmake_minimum_required(VERSION 2.8)
 project(asrl__planning)
 include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLICY_SCOPE)
 
+add_compile_definitions(ACCEPT_USE_OF_DEPRECATED_PROJ_API_H)
+
 
 ###### IMPORT DEPENDENCIES (build_depends) ######
 ## System ##
@@ -14,6 +16,9 @@ find_package(PROJ4 REQUIRED)
 find_package(OpenMP REQUIRED)
 set_openmp_flags()
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 ###### ROS ######
 # This is a top-level algorithm package that is ros-agnostic
 # It should not have any ROS dependencies, but may have other ros-agnostic dependencies.
@@ -41,10 +46,10 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
-                   INCLUDE_DIRS include 
+                   INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}__mission ${PROJECT_NAME}__state_machine ${PROJECT_NAME}__planners
                    ##Dependencies (build_depends and run_depends)
                    DEPENDS Protobuf
diff --git a/asrl__planning/src/RosCallbacks.cpp b/asrl__planning/src/RosCallbacks.cpp
index cc8e15fbc..f6b5accb3 100644
--- a/asrl__planning/src/RosCallbacks.cpp
+++ b/asrl__planning/src/RosCallbacks.cpp
@@ -198,7 +198,7 @@ bool RosCallbacks::_incrementalRelax(const EdgePtr& e) {
     v.neighbours = std::vector<uint64_t>(adj.begin(), adj.end());
 
     if (relaxationValid_ || !pool_.isIdle()) {
-      if (std::abs(uint64_t(e->to()) - uint64_t(e->from())) == 1
+      if (std::abs(int(uint64_t(e->to()) - uint64_t(e->from()))) == 1
           || (e->from().minorId() == 0 && e->type() == EdgeIdType::Type::Spatial)) {
 
         if (cachedResponse_.active_branch.size() == 0) {
diff --git a/asrl__planning/test/TimePlannerTests.cpp b/asrl__planning/test/TimePlannerTests.cpp
index d5e7e607f..06bda9282 100644
--- a/asrl__planning/test/TimePlannerTests.cpp
+++ b/asrl__planning/test/TimePlannerTests.cpp
@@ -17,6 +17,7 @@ INITIALIZE_EASYLOGGINGPP
 #include <asrl/planning/SimplePlanner.hpp>
 
 #include <iostream>
+#include <random>
 
 using namespace asrl::pose_graph;
 
diff --git a/asrl__pose_graph/CMakeLists.txt b/asrl__pose_graph/CMakeLists.txt
index 491e03a9c..19ecddcd9 100644
--- a/asrl__pose_graph/CMakeLists.txt
+++ b/asrl__pose_graph/CMakeLists.txt
@@ -3,6 +3,8 @@ cmake_minimum_required(VERSION 2.8)
 project(asrl__pose_graph)
 include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLICY_SCOPE)
 
+add_compile_definitions(ACCEPT_USE_OF_DEPRECATED_PROJ_API_H)
+
 ###### IMPORT DEPENDENCIES (build_depends) ######
 ## System ##
 #find_package([system_dependency_1] REQUIRED)
@@ -14,6 +16,9 @@ find_package(PROJ4 REQUIRED)
 find_package(OpenMP REQUIRED)
 set_openmp_flags()
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 ###### ROS ######
 # This is a top-level algorithm package that is ros-agnostic
 # It should not have any ROS dependencies, but may have other ros-agnostic dependencies.
@@ -38,10 +43,10 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
-                   INCLUDE_DIRS include 
+                   INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}__structure ${PROJECT_NAME}__index ${PROJECT_NAME}__interface ${PROJECT_NAME}__relax
                    ##Dependencies (build_depends and run_depends)
                    DEPENDS OpenCV Protobuf #[system_dependency]
@@ -86,8 +91,8 @@ target_link_libraries(${PROJECT_NAME}__structure ${catkin_LIBRARIES} ${LGMath_LI
 add_dependencies(${PROJECT_NAME}__structure ${catkin_EXPORTED_TARGETS} ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
 add_executable(NodeTest src/examples/node_test.cpp)
-target_link_libraries(NodeTest ${PROJECT_NAME}__structure 
-                               ${catkin_LIBRARIES} 
+target_link_libraries(NodeTest ${PROJECT_NAME}__structure
+                               ${catkin_LIBRARIES}
                                ${PROTOBUF_LIBRARIES}
                                ${OpenCV_LIBRARIES}
                                ${GLOG_LIBRARIES})
@@ -168,7 +173,7 @@ add_subdirectory(test)
 #add_dependencies(${PROJECT_NAME}__tests ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
 #add_executable(feature_stream ${CMAKE_CURRENT_SOURCE_DIR}/src/feature_stream.cpp)
-#target_link_libraries(feature_stream ${catkin_LIBRARIES} 
+#target_link_libraries(feature_stream ${catkin_LIBRARIES}
 #                                         ${OpenCV_LIBRARIES}
-#                                         ${PROTOBUF_LIBRARIES} ) 
+#                                         ${PROTOBUF_LIBRARIES} )
 #add_dependencies(feature_stream ${${PROJECT_NAME}_EXPORTED_TARGETS})
diff --git a/asrl__pose_graph/test/CommonEvalTests.cpp b/asrl__pose_graph/test/CommonEvalTests.cpp
index d57a1a3a7..0eeb12422 100644
--- a/asrl__pose_graph/test/CommonEvalTests.cpp
+++ b/asrl__pose_graph/test/CommonEvalTests.cpp
@@ -10,6 +10,7 @@ INITIALIZE_EASYLOGGINGPP
 #include <asrl/pose_graph/index/Graph.hpp>
 
 #include <iostream>
+#include <random>
 
 using namespace asrl::pose_graph;
 
diff --git a/asrl__pose_graph/test/CompositeTests.cpp b/asrl__pose_graph/test/CompositeTests.cpp
index b68f0cf71..eecd82299 100644
--- a/asrl__pose_graph/test/CompositeTests.cpp
+++ b/asrl__pose_graph/test/CompositeTests.cpp
@@ -16,6 +16,7 @@ INITIALIZE_EASYLOGGINGPP
 #include <asrl/pose_graph/evaluator/Time.hpp>
 
 #include <iostream>
+#include <random>
 
 using namespace asrl::pose_graph;
 
diff --git a/asrl__pose_graph/test/EvaluatorTests.cpp b/asrl__pose_graph/test/EvaluatorTests.cpp
index 0373150f3..b425e3f63 100644
--- a/asrl__pose_graph/test/EvaluatorTests.cpp
+++ b/asrl__pose_graph/test/EvaluatorTests.cpp
@@ -11,6 +11,7 @@ INITIALIZE_EASYLOGGINGPP
 #include <asrl/pose_graph/index/Graph.hpp>
 
 #include <iostream>
+#include <random>
 
 using namespace asrl::pose_graph;
 using namespace asrl::common;
@@ -497,7 +498,7 @@ TEST_CASE_METHOD(EvaluatorTestFixture, "Weight Evaluator", "[weight]")  {
     for (auto it = graph_->vertices()->begin(); it != graph_->vertices()->end(); ++it) {
       auto res1 = eval1->at(it->first);
       auto res2 = eval2->at(it->first);
-      
+
       CHECK(( eq11->at(it->first) ));
       CHECK(( eq22->at(it->first) ));
       CHECK(( eq12->at(it->first) == (res1 == res2)  ));
diff --git a/asrl__pose_graph/test/PathTests.cpp b/asrl__pose_graph/test/PathTests.cpp
index 5cc8c36e5..9c6f5a3a6 100644
--- a/asrl__pose_graph/test/PathTests.cpp
+++ b/asrl__pose_graph/test/PathTests.cpp
@@ -1,4 +1,5 @@
 #include <iostream>
+#include <random>
 #include <asrl/pose_graph/path/Path.hpp>
 
 #include <asrl/common/logging.hpp>
diff --git a/asrl__pose_graph/test/RelaxationTests.cpp b/asrl__pose_graph/test/RelaxationTests.cpp
index cded03ef8..e1a9ef045 100644
--- a/asrl__pose_graph/test/RelaxationTests.cpp
+++ b/asrl__pose_graph/test/RelaxationTests.cpp
@@ -12,6 +12,8 @@ INITIALIZE_EASYLOGGINGPP
 #include <asrl/pose_graph/relaxation/PoseGraphRelaxation.hpp>
 #include <asrl/pose_graph/evaluator/Accumulators.hpp>
 
+#include <random>
+
 #define GRAPH_SIZE 10
 #define ANGLE_NOISE -M_PI / 4.f / 6.f
 #define LINEAR_NOISE 1.f / 6.f
diff --git a/asrl__steam_extensions/CMakeLists.txt b/asrl__steam_extensions/CMakeLists.txt
index eaa9271be..ab7668447 100644
--- a/asrl__steam_extensions/CMakeLists.txt
+++ b/asrl__steam_extensions/CMakeLists.txt
@@ -7,12 +7,15 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 ###### IMPORT DEPENDENCIES (build_depends) ######
 ## System ##
 #find_package([system_dependency_1] REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(easyloggingpp REQUIRED)
 # find OpenMP - multithreading package
 find_package(OpenMP REQUIRED)
 set_openmp_flags()
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 ###### ROS ######
 # This is a top-level algorithm package that is ros-agnostic
 # It should not have any ROS dependencies, but may have other ros-agnostic dependencies.
@@ -25,10 +28,10 @@ if (CATKIN_ENABLED)
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
-                   INCLUDE_DIRS include 
+                   INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}
                    #Dependencies (build_depends and run_depends)
                    DEPENDS #[system_dependency]
@@ -56,19 +59,19 @@ add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})
 #add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})
 
 #add_executable(feature_stream ${CMAKE_CURRENT_SOURCE_DIR}/src/feature_stream.cpp)
-#target_link_libraries(feature_stream ${catkin_LIBRARIES} 
+#target_link_libraries(feature_stream ${catkin_LIBRARIES}
 #                                         ${OpenCV_LIBRARIES}
-#                                         ${PROTOBUF_LIBRARIES} ) 
+#                                         ${PROTOBUF_LIBRARIES} )
 #add_dependencies(feature_stream ${catkin_EXPORTED_TARGETS})
 
 add_executable(accelerometer_calibration  ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/accelerometer_calibration.cpp)
-target_link_libraries(accelerometer_calibration 
+target_link_libraries(accelerometer_calibration
                                ${PROJECT_NAME}
                                ${catkin_LIBRARIES}
                                ${PROTOBUF_LIBRARIES}
                                ${OpenCV_LIBRARIES}
                                ${Steam_LIBRARIES})
-                               
+
 # Unit Tests
 add_subdirectory(test)
 
diff --git a/asrl__terrain_assessment/CMakeLists.txt b/asrl__terrain_assessment/CMakeLists.txt
index 86651cee1..58f278c40 100644
--- a/asrl__terrain_assessment/CMakeLists.txt
+++ b/asrl__terrain_assessment/CMakeLists.txt
@@ -13,15 +13,18 @@ find_package(easyloggingpp REQUIRED)
 find_package(OpenCV REQUIRED)
 find_package(PCL REQUIRED)
 find_package(Protobuf REQUIRED)
-find_package(Qt4 REQUIRED)
+find_package(Qt5 COMPONENTS Core Widgets Gui REQUIRED)
 find_package(catch REQUIRED)
 
 # find OpenMP - multithreading package
 find_package(OpenMP REQUIRED)
 set_openmp_flags()
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 # Include directories.
-include(${QT_USE_FILE})
+# include(${QT_USE_FILE})
 include_directories(include ${Boost_INCLUDE_DIRS}
                             ${easyloggingpp_INCLUDE_DIRS}
                             ${OpenCV_INCLUDE_DIRS}
@@ -69,7 +72,7 @@ if (CATKIN_ENABLED)
                          Eigen3
                          LGMath
                          OpenCV
-                         Qt4
+                         Qt5
                          Robochunk
                  CATKIN_DEPENDS asrl__common
                                 asrl__messages
@@ -95,7 +98,7 @@ if (CATKIN_ENABLED)
                                                          ${catkin_LIBRARIES})
   add_dependencies(${PROJECT_NAME}__ros_conversions ${catkin_EXPORTED_TARGETS} ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
-  qt4_wrap_cpp(${PROJECT_NAME}__QRosTimer__MOC_FILE include/asrl/terrain_assessment/gui/QRosTimer.hpp)
+  qt_wrap_cpp(${PROJECT_NAME}__QRosTimer__MOC_FILE include/asrl/terrain_assessment/gui/QRosTimer.hpp)
 
   add_executable(${PROJECT_NAME}__ChangeDetectionGuiNode src/gui/ChangeDetectionGuiNode.cpp
                                                          src/gui/QRosTimer.cpp
@@ -153,7 +156,7 @@ target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}__gp
                                       yaml-cpp)
 add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS} ${${PROJECT_NAME}_EXPORTED_TARGETS})
 
-qt4_wrap_cpp(${PROJECT_NAME}__ChangeDetectionGui__MOC_FILES include/asrl/terrain_assessment/gui/ChangeDetectionGui.hpp
+qt_wrap_cpp(${PROJECT_NAME}__ChangeDetectionGui__MOC_FILES DestName include/asrl/terrain_assessment/gui/ChangeDetectionGui.hpp
                                                             include/asrl/terrain_assessment/gui/QClickableLabel.hpp
                                                             include/asrl/terrain_assessment/gui/QImageLabel.hpp
                                                             include/asrl/terrain_assessment/gui/QPatchLabel.hpp
diff --git a/asrl__terrain_assessment/include/asrl/terrain_assessment/PatchGenParams.hpp b/asrl__terrain_assessment/include/asrl/terrain_assessment/PatchGenParams.hpp
index a452c04ca..7d33942b6 100644
--- a/asrl__terrain_assessment/include/asrl/terrain_assessment/PatchGenParams.hpp
+++ b/asrl__terrain_assessment/include/asrl/terrain_assessment/PatchGenParams.hpp
@@ -5,6 +5,7 @@
 
 // stl
 #include <memory>
+#include <vector>
 
 namespace asrl {
 namespace terrain_assessment {
diff --git a/asrl__terrain_assessment/include/asrl/terrain_assessment/gp/GPClassifier.hpp b/asrl__terrain_assessment/include/asrl/terrain_assessment/gp/GPClassifier.hpp
index 828ce9c02..3b46e95e4 100644
--- a/asrl__terrain_assessment/include/asrl/terrain_assessment/gp/GPClassifier.hpp
+++ b/asrl__terrain_assessment/include/asrl/terrain_assessment/gp/GPClassifier.hpp
@@ -8,6 +8,7 @@
 
 // stl
 #include <memory>
+#include <vector>
 
 namespace asrl {
 namespace terrain_assessment {
diff --git a/asrl__vision/CMakeLists.txt b/asrl__vision/CMakeLists.txt
index f581b4c13..94c515389 100644
--- a/asrl__vision/CMakeLists.txt
+++ b/asrl__vision/CMakeLists.txt
@@ -7,7 +7,7 @@ include("${CMAKE_CURRENT_LIST_DIR}/../asrl__cmake/AsrlIncludes.cmake.in" NO_POLI
 ## System ##
 #find_package([system_dependency_1] REQUIRED)
 find_package(OpenCV REQUIRED)
-find_package(Eigen3 3.2.2 REQUIRED)
+find_package(Eigen3 REQUIRED)
 find_package(Protobuf REQUIRED)
 find_package(PCL REQUIRED)
 
@@ -39,6 +39,9 @@ set(OPENCV_VERSION_NUM ${OpenCV_VERSION_MAJOR} CACHE STRING "A copy of the varia
 
 set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter")
 
+add_definitions(-DEIGEN_DONT_VECTORIZE=1)
+add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)
+
 # Keep a reord of the OpenCV major version number
 # Note:"INTERNAL" was taken out because a test script was failing to find the OPENCV_VERSION_NUM
 set(OPENCV_VERSION_NUM ${OpenCV_VERSION_MAJOR} CACHE STRING "A copy of the variable OpenCV_VERSION_MAJOR" )
@@ -50,21 +53,21 @@ set(OPENCV_VERSION_NUM ${OpenCV_VERSION_MAJOR} CACHE STRING "A copy of the varia
 if (CATKIN_ENABLED)
     # Adding packages as components adds them to our ${catkin_INCLUDE_DIRS} and ${catkin_LIBRARIES} variables.
     find_package(catkin REQUIRED
-                 COMPONENTS asrl__common asrl__messages roscpp robochunk_base robochunk_util robochunk_msgs 
+                 COMPONENTS asrl__common asrl__messages roscpp robochunk_base robochunk_util robochunk_msgs
                  #OPTIONAL_COMPONENTS libelas
     )
 
     ##### EXPORT MYSELF TO CATKIN #####
     #   "INCLUDE_DIRS" specifies to location of your package's headers for inclusion in inheriting ${catkin_INCLUDE_DIRS}.
     #   "LIBRARIES" specifies the libraries your package provides for inclusion in inheriting ${catkin_LIBRARIES}. This should match all add_library directives.
-    #   "DEPENDS" specifies the system dependencies 
+    #   "DEPENDS" specifies the system dependencies
     #   "CATKIN_DEPENDS" specifies the ros dependencies
     catkin_package(
                    INCLUDE_DIRS include
                    LIBRARIES ${PROJECT_NAME}
                    ##Dependencies (build_depends and run_depends)
                    DEPENDS OpenCV Protobuf #Glog #[system_dependency]
-                   CATKIN_DEPENDS asrl__common asrl__messages roscpp robochunk_base robochunk_util robochunk_msgs 
+                   CATKIN_DEPENDS asrl__common asrl__messages roscpp robochunk_base robochunk_util robochunk_msgs
     )
 endif()
 
diff --git a/asrl__vision/include/asrl/vision/Types.hpp b/asrl__vision/include/asrl/vision/Types.hpp
index b14d8c82e..f273b81f9 100644
--- a/asrl__vision/include/asrl/vision/Types.hpp
+++ b/asrl__vision/include/asrl/vision/Types.hpp
@@ -13,7 +13,7 @@
 #include <opencv2/opencv_modules.hpp> // defines HAVE_OPENCV_CUDAFEATURES2D
 #include <opencv2/core/core.hpp>
 #include <opencv2/features2d/features2d.hpp>
-#if CV_MAJOR_VERSION == 3
+#if CV_MAJOR_VERSION >= 3
 #include <opencv2/core/cuda.hpp>
 #endif
 
@@ -112,7 +112,7 @@ struct RigImages {
     channels = channel.channels;
     return *this;
   }
-  
+
   // @brief move constructor
   RigImages(RigImages &&rig) {
     name = rig.name;
@@ -199,7 +199,7 @@ struct Features {
   cv::Mat descriptors;
 
   /// The descriptors stored as a binary blob
-#if CV_MAJOR_VERSION == 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
+#if CV_MAJOR_VERSION >= 3 && defined(HAVE_OPENCV_CUDAFEATURES2D)
   cv::cuda::GpuMat gpu_descriptors;
 #endif
 
@@ -240,7 +240,7 @@ struct PersistentId {
 
 struct LandmarkId {
   LandmarkId() : index(-1), channel(-1), camera(-1), rig(-1), persistent() { }
-  
+
   LandmarkId(const PersistentId & p, uint32_t ri, uint32_t ch) :
              index(-1), channel(ch), camera(-1), rig(ri), persistent(p) { }
 
diff --git a/asrl__vision/include/asrl/vision/features/bow/SparseBOWDescriptor.hpp b/asrl__vision/include/asrl/vision/features/bow/SparseBOWDescriptor.hpp
index 7f458838c..2b64c8999 100644
--- a/asrl__vision/include/asrl/vision/features/bow/SparseBOWDescriptor.hpp
+++ b/asrl__vision/include/asrl/vision/features/bow/SparseBOWDescriptor.hpp
@@ -4,6 +4,7 @@
 #include <opencv2/features2d/features2d.hpp>
 #include <map>
 #include <list>
+#include <numeric>
 
 namespace asrl {
 namespace vision {
diff --git a/asrl__vision/include/asrl/vision/features/extractor/OrbFeatureExtractor.hpp b/asrl__vision/include/asrl/vision/features/extractor/OrbFeatureExtractor.hpp
index b24342fa0..f7c737d1b 100644
--- a/asrl__vision/include/asrl/vision/features/extractor/OrbFeatureExtractor.hpp
+++ b/asrl__vision/include/asrl/vision/features/extractor/OrbFeatureExtractor.hpp
@@ -14,7 +14,7 @@
 #include <opencv2/core/version.hpp>
 #if CV_MAJOR_VERSION == 2
 #include <opencv2/features2d/features2d.hpp>
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
 #include <opencv2/xfeatures2d.hpp>
 #if defined(HAVE_OPENCV_CUDAFEATURES2D)
 #include <opencv2/cudafeatures2d.hpp>
@@ -26,7 +26,7 @@
 #if CV_MAJOR_VERSION == 2
 typedef cv::StarDetector StarDetector;
 typedef cv::Mat uMat;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
 typedef cv::xfeatures2d::StarDetector StarDetector;
 typedef cv::UMat uMat;
 #endif
@@ -36,7 +36,7 @@ namespace vision {
 
 /////////////////////////////////////////////////////////////////////////
 /// @class Feature extractor for the OpenCV ORB Feature Extractor.
-/// @details This class accepts greyscale images and computes ORB features 
+/// @details This class accepts greyscale images and computes ORB features
 ///          on either mono images or stereo pairs with left-right matching.
 /////////////////////////////////////////////////////////////////////////
 class OrbFeatureExtractor : public BaseFeatureExtractor {
@@ -94,7 +94,7 @@ private:
 #if CV_MAJOR_VERSION == 2
     cv::ORB *detector_;
     std::shared_ptr<StarDetector> stardetector_;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     cv::Ptr<cv::ORB> detector_;
     cv::Ptr<cv::xfeatures2d::StarDetector> stardetector_;
 #if defined(HAVE_OPENCV_CUDAFEATURES2D) && CV_MINOR_VERSION > 1
diff --git a/asrl__vision/include/asrl/vision/outliers/sampler/BasicSampler.hpp b/asrl__vision/include/asrl/vision/outliers/sampler/BasicSampler.hpp
index f2380a0fa..fd077e5ac 100644
--- a/asrl__vision/include/asrl/vision/outliers/sampler/BasicSampler.hpp
+++ b/asrl__vision/include/asrl/vision/outliers/sampler/BasicSampler.hpp
@@ -18,6 +18,7 @@
 #include <algorithm>
 #include <memory>
 #include <chrono>
+#include <random>
 
 namespace asrl {
 namespace vision {
diff --git a/asrl__vision/include/asrl/vision/stereo_proc/filters/GpuBilateralFilter.hpp b/asrl__vision/include/asrl/vision/stereo_proc/filters/GpuBilateralFilter.hpp
index fac2728be..e588b780c 100644
--- a/asrl__vision/include/asrl/vision/stereo_proc/filters/GpuBilateralFilter.hpp
+++ b/asrl__vision/include/asrl/vision/stereo_proc/filters/GpuBilateralFilter.hpp
@@ -8,14 +8,14 @@
   #include <opencv2/core/version.hpp>
   #if CV_MAJOR_VERSION == 2
   #include <opencv2/gpu/gpu.hpp>
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
   #include <opencv2/cudaimgproc.hpp>
   #endif
 
   // OpenCV2 vs 3 typedefs
   #if CV_MAJOR_VERSION == 2
     namespace cvcuda = cv::gpu;
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
     namespace cvcuda = cv::cuda;
   #endif
 
diff --git a/asrl__vision/include/asrl/vision/stereo_proc/matchers/CVGpuStereoBM.hpp b/asrl__vision/include/asrl/vision/stereo_proc/matchers/CVGpuStereoBM.hpp
index 4a5d3e9a8..98fca5292 100644
--- a/asrl__vision/include/asrl/vision/stereo_proc/matchers/CVGpuStereoBM.hpp
+++ b/asrl__vision/include/asrl/vision/stereo_proc/matchers/CVGpuStereoBM.hpp
@@ -9,14 +9,14 @@
   #include <opencv2/core/version.hpp>
   #if CV_MAJOR_VERSION == 2
   #include <opencv2/gpu/gpu.hpp>
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
   #include <opencv2/cudastereo.hpp>
   #endif
 
   // OpenCV2 vs 3 typedefs
   #if CV_MAJOR_VERSION == 2
     namespace cvcuda = cv::gpu;
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
     namespace cvcuda = cv::cuda;
   #endif
 
@@ -51,7 +51,7 @@
 
   #if CV_MAJOR_VERSION == 2
     cv::Ptr<cv::gpu::StereoBM_GPU> stereo_bm_gpu_;
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
     cv::Ptr<cv::cuda::StereoBM> stereo_bm_gpu_;
   #endif
   };
diff --git a/asrl__vision/include/asrl/vision/stereo_proc/reprojectors/CVGpuReprojector.hpp b/asrl__vision/include/asrl/vision/stereo_proc/reprojectors/CVGpuReprojector.hpp
index 4f4fd3051..ace9e2808 100644
--- a/asrl__vision/include/asrl/vision/stereo_proc/reprojectors/CVGpuReprojector.hpp
+++ b/asrl__vision/include/asrl/vision/stereo_proc/reprojectors/CVGpuReprojector.hpp
@@ -9,14 +9,14 @@
   #include <opencv2/core/version.hpp>
   #if CV_MAJOR_VERSION == 2
   #include <opencv2/gpu/gpu.hpp>
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
   #include <opencv2/cudastereo.hpp>
   #endif
 
   // OpenCV2 vs 3 typedefs
   #if CV_MAJOR_VERSION == 2
     namespace cvcuda = cv::gpu;
-  #elif CV_MAJOR_VERSION == 3
+  #elif CV_MAJOR_VERSION >= 3
     namespace cvcuda = cv::cuda;
   #endif
 
diff --git a/asrl__vision/samples/FindMonoHomography.cpp b/asrl__vision/samples/FindMonoHomography.cpp
index 60c3b5317..c9699ae25 100644
--- a/asrl__vision/samples/FindMonoHomography.cpp
+++ b/asrl__vision/samples/FindMonoHomography.cpp
@@ -12,7 +12,7 @@
 
 #if CV_MAJOR_VERSION == 2
 #include <opencv2/nonfree/nonfree.hpp>
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
 #include <opencv2/xfeatures2d/nonfree.hpp>
 #endif
 
@@ -47,7 +47,7 @@ int main()
   SurfFeatureDetector detector(1000.);
   detector.detect(img1, kpts1);
   detector.detect(img2, kpts2);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   cv::xfeatures2d::SURF *surf = cv::xfeatures2d::SURF::create();
   surf->detect(img1, kpts1);
   surf->detect(img2, kpts2);
@@ -59,7 +59,7 @@ int main()
   SurfDescriptorExtractor extractor;
   extractor.compute( img1, kpts1, desc1 );
   extractor.compute( img2, kpts2, desc2 );
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   surf->compute( img1, kpts1, desc1 );
   surf->compute( img2, kpts2, desc2 );
 #endif
@@ -97,7 +97,7 @@ int main()
   }
 
   // Find the homography with OpenCV's method
-  Mat found_homography = findHomography(pts1, pts2, CV_RANSAC);
+  Mat found_homography = findHomography(pts1, pts2, RANSAC);
 
   // Find the homography and inliers with our method
   av::BasicSampler::Ptr sampler = std::make_shared<av::BasicSampler>();
diff --git a/asrl__vision/src/features/extractor/OrbFeatureExtractor.cpp b/asrl__vision/src/features/extractor/OrbFeatureExtractor.cpp
index 9bacd9cb5..14d72d77f 100644
--- a/asrl__vision/src/features/extractor/OrbFeatureExtractor.cpp
+++ b/asrl__vision/src/features/extractor/OrbFeatureExtractor.cpp
@@ -22,14 +22,14 @@ void OFE::initialize(ORBConfiguration &config) {
                                   config_.patchSize_);
   stardetector_ = std::make_shared<StarDetector>();
 
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   detector_ = cv::ORB::create(config_.num_detector_features_,
                                   config_.scaleFactor_,
                                   config_.nlevels_,
                                   config_.edgeThreshold_,
                                   config_.firstLevel_,
                                   config_.WTA_K_,
-                                  config_.scoreType_,
+                                  static_cast<cv::ORB::ScoreType>(config_.scoreType_),
                                   config_.patchSize_,
                                   config_.fastThreshold_);
 
@@ -104,7 +104,7 @@ void OFE::detectOnPyramid(const uMat& image, Keypoints& keypoints, const cv::Mat
       src = dst;
 
       if(!mask.empty()) {
-        cv::resize( dilated_mask, src_mask, src.size(), 0, 0, CV_INTER_AREA );
+        cv::resize( dilated_mask, src_mask, src.size(), 0, 0, cv::INTER_AREA );
       }
     }
   }
@@ -120,7 +120,7 @@ void OFE::detectOnPyramid(const uMat& image, Keypoints& keypoints, const cv::Mat
 }
 
 void OFE::computeAngles(const uMat& image, Keypoints& keypoints) {
-#if CV_MAJOR_VERSION == 3
+#if CV_MAJOR_VERSION >= 3
   cv::Mat accessor = image.getMat(cv::ACCESS_READ);
 #else
   cv::Mat accessor = image;
@@ -152,7 +152,7 @@ void OFE::detectWithORB(const uMat& image, Keypoints& keypoints, const cv::Mat&
   // detect keypoints (don't generate descriptors yet).
 #if CV_MAJOR_VERSION == 2
   (*detector_)(image, mask, keypoints, cv::noArray());
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   detector_->detect(image, keypoints, cv::noArray());
 #endif
 
@@ -255,7 +255,7 @@ Features OFE::extractFeatures(const cv::Mat & image) {
 #if CV_MAJOR_VERSION == 2
   bool use_provided_keypoints = true;
   (*detector_)(uimage, mask, frame.keypoints, frame.descriptors, use_provided_keypoints);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   if(config_.use_GPU_descriptors_) {
 #if defined(HAVE_OPENCV_CUDAFEATURES2D) && CV_MINOR_VERSION > 1
     // we have to sort by the octave or the GPU descriptors get messed up for some reason
diff --git a/asrl__vision/src/image_conversions.cpp b/asrl__vision/src/image_conversions.cpp
index 1eceaaccb..f98262fc8 100644
--- a/asrl__vision/src/image_conversions.cpp
+++ b/asrl__vision/src/image_conversions.cpp
@@ -45,7 +45,7 @@ ImageConversion StringToImageConversion(const std::string &conversion) {
 ////////////////////////////////////////////////////////////////////////////////
 Image RGB2Grayscale(const Image &src){
   Image dst;
-  cv::cvtColor(src.data,dst.data,CV_BGR2GRAY);
+  cv::cvtColor(src.data,dst.data,cv::COLOR_BGR2GRAY);
   dst.name = src.name;
   return dst;
 }
@@ -103,8 +103,8 @@ Image RGB2ColorConstant(const Image &src,float &alpha, bool histogram_equalizati
   //#pragma omp parallel for num_threads(6)
   for(int idx = 0; idx < dst.cols*dst.rows; idx++) {
     auto data_idx = idx*3;
-    gray[idx] = log_table[src.data.data[data_idx+1]] - 
-                alpha*log_table[src.data.data[data_idx]] - 
+    gray[idx] = log_table[src.data.data[data_idx+1]] -
+                alpha*log_table[src.data.data[data_idx]] -
                 beta*log_table[src.data.data[data_idx+2]];
   }
 
diff --git a/asrl__vision/src/messages/bridge.cpp b/asrl__vision/src/messages/bridge.cpp
index bf02e7946..b310f70ec 100644
--- a/asrl__vision/src/messages/bridge.cpp
+++ b/asrl__vision/src/messages/bridge.cpp
@@ -21,7 +21,7 @@ featureCvType(const vision::FeatureImpl & type) {
     default:
       LOG(WARNING) << "featureCvType: Can't find the feature type "
                    << static_cast<long long>(type);
-      return std::make_tuple(CV_USRTYPE1,sizeof(char));
+      return std::make_tuple(CV_16F,sizeof(char));
   }
 }
 
@@ -152,7 +152,7 @@ vision::RigFeatures copyFeatures(
 vision_msgs::ChannelFeatures copyFeatures(const vision::ChannelFeatures &channel_features) {
   vision_msgs::ChannelFeatures proto_msg;
   proto_msg.set_name(channel_features.name);
-  
+
   for (auto &camera : channel_features.cameras) {
     auto *proto_camera = proto_msg.add_cameras();
     *proto_camera = copyFeatures(camera);
@@ -169,7 +169,7 @@ vision_msgs::RigFeatures copyFeatures(const vision::RigFeatures &rig_features) {
   proto_msg.set_name(rig_features.name);
   for (auto &channel : rig_features.channels) {
     auto *proto_channel = proto_msg.add_channels();
-    *proto_channel = copyFeatures(channel);  
+    *proto_channel = copyFeatures(channel);
   }
   return proto_msg;
 }
@@ -381,7 +381,7 @@ vision_msgs::Features copyFeatures(const vision::Features &features) {
     proto_keypoint_info->set_orientation(keypoint.angle);
     proto_keypoint_info->set_response(keypoint.response);
     // precision isn't available in vision_msgs::Features
-  } 
+  }
 
   // memcpy the descriptors over.
   auto *proto_descriptors = proto_features.mutable_descriptors();
@@ -430,7 +430,7 @@ vision::RigImages copyImages(const robochunk::sensor_msgs::RigImages &robochunk_
   auto num_channels = channels.size();
 
   for(int idx = 0; idx < num_channels; ++idx) {
-    auto channel = copyImages(channels.Get(idx)); 
+    auto channel = copyImages(channels.Get(idx));
     rig.channels.emplace_back(std::move(channel));
   }
   return rig;
@@ -452,7 +452,7 @@ robochunk::sensor_msgs::Image copyImages(const vision::Image &asrl_image) {
     image.set_encoding("bgr8");
     image.set_depth(3);
   }
-  
+
   auto datasize = image.step()*image.height();
 	image.add_data(&cv_image.data[0],datasize);
   return image;
@@ -465,7 +465,7 @@ robochunk::sensor_msgs::ChannelImages copyImages(const vision::ChannelImages &as
     auto *camera = channel.add_cameras();
     *camera = copyImages(asrl_camera);
   }
-  
+
   return channel;
 }
 
@@ -503,7 +503,7 @@ vision::CameraIntrinsic copyIntrinsics(const robochunk::sensor_msgs::CameraCalib
 
 vision::RigCalibration copyCalibration(const robochunk::sensor_msgs::RigCalibration &robochunk_calibration) {
   vision::RigCalibration calibration;
-  
+
   calibration.rectified = robochunk_calibration.rectified();
   auto num_cameras = robochunk_calibration.intrinsics().size();
   for(int idx = 0; idx < num_cameras; ++idx) {
@@ -542,7 +542,7 @@ vision::RigCalibration copyCalibration(const robochunk::sensor_msgs::XB3Calibrat
 vision_msgs::ChannelLandmarks copyLandmarks(const vision::ChannelLandmarks &asrl_landmarks) {
   vision_msgs::ChannelLandmarks new_landmarks;
   new_landmarks.set_name(asrl_landmarks.name);
-  
+
   auto lm_info = asrl_landmarks.appearance.feat_infos.cbegin();
   for(auto kp = asrl_landmarks.appearance.keypoints.cbegin();
       kp != asrl_landmarks.appearance.keypoints.end(); ++kp, ++lm_info) {
@@ -565,7 +565,7 @@ vision_msgs::ChannelLandmarks copyLandmarks(const vision::ChannelLandmarks &asrl
     proto_point->set_y(point(1));
     proto_point->set_z(point(2));
     proto_point->set_w(1.0);
-    
+
     new_landmarks.add_num_vo_observations(1);
     auto &cov = asrl_landmarks.covariances.col(idx);
     for(int cov_idx = 0; cov_idx < 9; ++cov_idx) {
diff --git a/asrl__vision/src/sensors/MonoPnPModel.cpp b/asrl__vision/src/sensors/MonoPnPModel.cpp
index 5945f04c4..f54d422f6 100644
--- a/asrl__vision/src/sensors/MonoPnPModel.cpp
+++ b/asrl__vision/src/sensors/MonoPnPModel.cpp
@@ -51,7 +51,7 @@ bool MonoPnPModel::solveModel(const SimpleMatches& matches,
   // the method for finding a solution
 #if CV_MAJOR_VERSION == 2
   int flags = (matches.size() == N) ? CV_P3P : CV_ITERATIVE;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   int flags = (matches.size() == N) ? cv::SOLVEPNP_P3P : cv::SOLVEPNP_ITERATIVE;
 #endif
 
@@ -94,7 +94,7 @@ bool MonoPnPModel::verifyMatches(const SimpleMatches& matches) const {
   // Check existence
   if (!pts_ref_ || !pts_query_)
     return false;
-  
+
   // Verify indices to be within points size
   for (unsigned int i = 0; i < matches.size(); ++i)
     if (matches[i].first >= pts_ref_->size() ||
diff --git a/asrl__vision/src/stereo_proc/filters/BgrToGrayFilter.cpp b/asrl__vision/src/stereo_proc/filters/BgrToGrayFilter.cpp
index 91a51f2ea..80866347e 100644
--- a/asrl__vision/src/stereo_proc/filters/BgrToGrayFilter.cpp
+++ b/asrl__vision/src/stereo_proc/filters/BgrToGrayFilter.cpp
@@ -15,7 +15,7 @@ cv::Mat BgrToGrayFilter::operator()(const cv::Mat& source) const {
 
   // Convert to grayscale using the opencv formula.
   if (use_opencv_formula_) {
-    cv::cvtColor(source, dest, CV_BGR2GRAY);
+    cv::cvtColor(source, dest, cv::COLOR_BGR2GRAY);
   }
   // Convert to grayscale using the green channel.
   else {
diff --git a/asrl__vision/src/stereo_proc/matchers/CVGpuStereoBM.cpp b/asrl__vision/src/stereo_proc/matchers/CVGpuStereoBM.cpp
index 86c875a1f..13a348b7b 100644
--- a/asrl__vision/src/stereo_proc/matchers/CVGpuStereoBM.cpp
+++ b/asrl__vision/src/stereo_proc/matchers/CVGpuStereoBM.cpp
@@ -48,7 +48,7 @@ cvcuda::GpuMat CVGpuStereoBM::ComputeDisparityGpu(const cv::Mat& left,
   if(stereo_bm_gpu_ ==nullptr) {
 #if CV_MAJOR_VERSION == 2
     stereo_bm_gpu_ = new cvcuda::StereoBM_GPU(cvcuda::StereoBM_GPU::BASIC_PRESET, params_->ndisp, params_->winSize);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     stereo_bm_gpu_ = cvcuda::createStereoBM(params_->ndisp, params_->winSize);
 #endif
   }
@@ -63,7 +63,7 @@ cvcuda::GpuMat CVGpuStereoBM::ComputeDisparityGpu(const cv::Mat& left,
   cvcuda::GpuMat disp_gpu;
 #if CV_MAJOR_VERSION == 2
   (*stereo_bm_gpu_)(left_gpu, right_gpu, disp_gpu);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   stereo_bm_gpu_->compute(left_gpu, right_gpu, disp_gpu);
 #endif
   return disp_gpu;
diff --git a/asrl__vision/src/stereo_proc/matchers/CVStereoBM.cpp b/asrl__vision/src/stereo_proc/matchers/CVStereoBM.cpp
index 9b036955f..c0690aab3 100644
--- a/asrl__vision/src/stereo_proc/matchers/CVStereoBM.cpp
+++ b/asrl__vision/src/stereo_proc/matchers/CVStereoBM.cpp
@@ -81,7 +81,7 @@ bool CVStereoBM::set_params(void) {
     block_matcher_->state->textureThreshold = params_->texture_threshold;
     block_matcher_->state->speckleWindowSize = params_->speckle_window_size;
     block_matcher_->state->speckleRange = params_->speckle_range;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     block_matcher_->setPreFilterCap(params_->prefilter_size);
     block_matcher_->setPreFilterSize(params_->prefilter_cap);
     block_matcher_->setBlockSize(params_->sad_window_size);
@@ -115,7 +115,7 @@ cv::Mat CVStereoBM::match(const cv::Mat& left,
     block_matcher_ = new cv::StereoBM(cv::StereoBM::BASIC_PRESET,
                                    params_->n_disp,
                                    params_->sad_window_size);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     block_matcher_ = cv::StereoBM::create(params_->n_disp,
                                    params_->sad_window_size);
 #endif
@@ -126,7 +126,7 @@ cv::Mat CVStereoBM::match(const cv::Mat& left,
   cv::Mat disp;
 #if CV_MAJOR_VERSION == 2
   (*block_matcher_)(left, right, disp, CV_16S);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   block_matcher_->compute(left, right, disp);
 #endif
   return disp;
diff --git a/asrl__vision/src/stereo_proc/matchers/CVStereoSGBM.cpp b/asrl__vision/src/stereo_proc/matchers/CVStereoSGBM.cpp
index a3b98c969..247bce5cb 100644
--- a/asrl__vision/src/stereo_proc/matchers/CVStereoSGBM.cpp
+++ b/asrl__vision/src/stereo_proc/matchers/CVStereoSGBM.cpp
@@ -59,7 +59,7 @@ void CVStereoSGBM::UpdateParams(const Params::Ptr& params) {
     sgbm_->speckleRange = params_->speckleRange;
     sgbm_->disp12MaxDiff = params_->disp12MaxDiff;
     sgbm_->fullDP = params_->fullDP;
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     sgbm_->setMinDisparity(params_->minDisparity);
     sgbm_->setNumDisparities(params_->numberOfDisparities);
     sgbm_->setBlockSize(params_->SADWindowSize);
@@ -97,7 +97,7 @@ cv::Mat CVStereoSGBM::match(const cv::Mat& left,
                                    params_->speckleWindowSize,
                                    params_->speckleRange,
                                    params_->fullDP);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
     sgbm_ = cv::StereoSGBM::create(params_->minDisparity,
                                    params_->numberOfDisparities,
                                    params_->SADWindowSize,
@@ -114,7 +114,7 @@ cv::Mat CVStereoSGBM::match(const cv::Mat& left,
   cv::Mat disp;
 #if CV_MAJOR_VERSION == 2
   (*sgbm_)(left, right, disp);
-#elif CV_MAJOR_VERSION == 3
+#elif CV_MAJOR_VERSION >= 3
   sgbm_->compute(left, right, disp);
 #endif
   return disp;
diff --git a/asrl__vision/test/outliers/MonoCameraInitTests.cpp b/asrl__vision/test/outliers/MonoCameraInitTests.cpp
index ac2bfd2f0..5f69bda02 100644
--- a/asrl__vision/test/outliers/MonoCameraInitTests.cpp
+++ b/asrl__vision/test/outliers/MonoCameraInitTests.cpp
@@ -18,7 +18,7 @@
 namespace av = asrl::vision;
 using namespace std;
 
-#if CV_MAJOR_VERSION == 3
+#if CV_MAJOR_VERSION >= 3
 
 SCENARIO("Mono initialization with GRIC homography", "[matching][mono][ransac]" ) {
   GIVEN("One set of points") {
diff --git a/deps/catkin/.catkin_tools/VERSION b/deps/catkin/.catkin_tools/VERSION
index f7abe273d..c8a5397fb 100644
--- a/deps/catkin/.catkin_tools/VERSION
+++ b/deps/catkin/.catkin_tools/VERSION
@@ -1 +1 @@
-0.4.2
\ No newline at end of file
+0.4.5
\ No newline at end of file
diff --git a/deps/catkin/.catkin_tools/profiles/default/config.yaml b/deps/catkin/.catkin_tools/profiles/default/config.yaml
index edc4d3947..3fdecca51 100644
--- a/deps/catkin/.catkin_tools/profiles/default/config.yaml
+++ b/deps/catkin/.catkin_tools/profiles/default/config.yaml
@@ -2,7 +2,7 @@ blacklist: []
 build_space: ../../../build/deps
 catkin_make_args: []
 cmake_args:
-- -DCMAKE_BUILD_TYPE=Release
+- -DCMAKE_BUILD_TYPE=Debug
 - -DTRANSLATOR=robochunk
 devel_layout: linked
 devel_space: ../../../devel/deps
diff --git a/deps/catkin/gpusurf b/deps/catkin/gpusurf
--- a/deps/catkin/gpusurf
+++ b/deps/catkin/gpusurf
@@ -1 +1 @@
-Subproject commit e1c85fcab5d8c280c4d631026afd571f9bea960c
+Subproject commit e1c85fcab5d8c280c4d631026afd571f9bea960c-dirty
diff --git a/deps/catkin/lgmath b/deps/catkin/lgmath
--- a/deps/catkin/lgmath
+++ b/deps/catkin/lgmath
@@ -1 +1 @@
-Subproject commit fe65601713aa945005adafaaeabde3409be7017f
+Subproject commit fe65601713aa945005adafaaeabde3409be7017f-dirty
diff --git a/deps/catkin/robochunk b/deps/catkin/robochunk
--- a/deps/catkin/robochunk
+++ b/deps/catkin/robochunk
@@ -1 +1 @@
-Subproject commit 5b2527766fc718fa69605a4042dfa82a91bf16a0
+Subproject commit 5b2527766fc718fa69605a4042dfa82a91bf16a0-dirty
diff --git a/deps/catkin/steam b/deps/catkin/steam
--- a/deps/catkin/steam
+++ b/deps/catkin/steam
@@ -1 +1 @@
-Subproject commit dfa1dc1eff364455d2cc6ecba0f0a9d600105036
+Subproject commit dfa1dc1eff364455d2cc6ecba0f0a9d600105036-dirty
