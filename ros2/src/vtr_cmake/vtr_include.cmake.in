## Compiler setup - assumed to be GNU
## Compile as C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Turn on as many warnings as possible by default.
add_compile_options(-march=native -pthread -Wall -Wextra)

# TODO bug in eigen
add_definitions(-DEIGEN_DONT_VECTORIZE=1)
add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)

# TODO for now allow PROJ deprecated syntax
add_compile_definitions(ACCEPT_USE_OF_DEPRECATED_PROJ_API_H)

# TODO for now turn off some warnings
# add_compile_options(-Wno-unused-function -Wno-unused-variable -Wno-virtual-move-assign -Wno-terminate -Wno-deprecated-declarations -Wno-pragmas)
# add_compile_options(-Wno-expansion-to-defined -Wno-unused-parameter -Wno-reorder)

# we suck at template instantiation. Help pls
# add_compile_options(-frepo)

# info please, why does the build suck?
# add_compile_options(-ftime-report -fmem-report)

# address sanitizer
# add_compile_options(-fsanitize=address)
# set(CMAKE_CXX_STANDARD_LIBRARIES -lasan)


## Setup for OpenMP, after the package has been included
function(set_openmp_flags)
  if(${OPENMP_FOUND})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" PARENT_SCOPE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" PARENT_SCOPE)
    message(STATUS "FOUND: OPENMP")
  else(${OPENMP_FOUND})
    message(STATUS "WARNING: OPENMP NOT FOUND - MULTICORE PERFORMANCE IS MUCH BETTER!")
  endif(${OPENMP_FOUND})
endfunction(set_openmp_flags)


## Set CUDA flags - enable or not.
option(CUDA_REQUESTED "Do you want to build CUDA?" ON)
function(set_cuda_flags)
  if(${CUDA_FOUND} AND ${CUDA_REQUESTED})
    set(CUDA_ENABLED TRUE PARENT_SCOPE)
    message(STATUS "CUDA enabled.")
  else()
    set(CUDA_ENABLED FALSE PARENT_SCOPE)
    message(STATUS "CUDA not requested/available.")
  endif()
endfunction(set_cuda_flags)
