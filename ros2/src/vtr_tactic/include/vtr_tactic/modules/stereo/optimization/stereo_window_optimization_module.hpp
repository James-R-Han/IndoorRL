#pragma once

// LGMath and Steam
#include <lgmath.hpp>
#include <steam.hpp>

#include <vtr_tactic/modules/base_module.hpp>
#include <vtr_tactic/modules/stereo/optimization/steam_module.hpp>

namespace vtr {
namespace tactic {

/** \brief A module that runs STEAM on multiple graph vertices. */
class StereoWindowOptimizationModule : public SteamModule {
 public:
  /** \brief Static module identifier. */
  static constexpr auto static_name = "stereo_window_optimization";

  /** \brief Collection of config parameters */
  struct Config : SteamModule::Config {
    bool depth_prior_enable;
    double depth_prior_weight;
  };

  StereoWindowOptimizationModule(const std::string &name = static_name)
      : SteamModule(name) {}

  void setConfig(std::shared_ptr<Config> &config);

 protected:
  /** \brief Update the graph with optimized transforms */
  virtual void updateGraphImpl(QueryCache &, MapCache &mdata,
                               const Graph::Ptr &graph, VertexId);

  /** \brief Given two frames, builds a sensor specific optimization problem. */
  virtual std::shared_ptr<steam::OptimizationProblem>
  generateOptimizationProblem(QueryCache &qdata, MapCache &mdata,
                              const std::shared_ptr<const Graph> &graph);

  virtual void updateCaches(QueryCache &qdata, MapCache &);

 private:
#if false
  /**
   * \brief samples and saves the optimized trajectory and stores it in the
   * latest vertex.
   */
  void saveTrajectory(QueryCache &qdata, MapCache &mdata,
                      const std::shared_ptr<Graph> &graph);
#endif
  /**
   * \brief Initializes the problem based on an initial condition.
   * The initial guess at the transformation between the query frame and the map
   * frame.
   */
  void resetProblem();

  /**
   * \brief Adds a depth cost associated with this landmark to the depth cost
   * terms.
   * \param landmark The landmark in question.
   */
  void addDepthCost(steam::se3::LandmarkStateVar::Ptr landmark);

  /**
   * \brief Verifies the input data being used in the optimization problem,
   * namely, the inlier matches and initial estimate.
   * \param qdata The query data.
   * \param mdata The map data.
   */
  virtual bool verifyInputData(QueryCache &qdata, MapCache &mdata);

  /**
   * \brief Verifies the output data generated byt the optimization problem
   * \param qdata The query data.
   * \param mdata The map data.
   */
  virtual bool verifyOutputData(QueryCache &qdata, MapCache &mdata);

  /**
   * \brief performs sanity checks on the landmark
   * \param point The landmark.
   * \param mdata The map data.*
   * \return true if the landmark meets all checks, false otherwise.
   */
  bool isLandmarkValid(const Eigen::Vector3d &point, MapCache &mdata);

  /** \brief the cost terms associated with landmark observations. */
  steam::ParallelizedCostTermCollection::Ptr cost_terms_;

  /** \brief The cost terms associated with landmark depth. */
  steam::ParallelizedCostTermCollection::Ptr depth_cost_terms_;

  /** \brief The loss function used for the depth cost. */
  steam::LossFunctionBase::Ptr sharedDepthLossFunc_;

  /** \brief the loss function assicated with observation cost. */
  steam::LossFunctionBase::Ptr sharedLossFunc_;

  /** \brief The steam problem. */
  std::shared_ptr<steam::OptimizationProblem> problem_;

  /** \brief Module configuration. */
  std::shared_ptr<Config> config_;
};

}  // namespace tactic
}  // namespace vtr
