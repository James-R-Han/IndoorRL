<?xml version="1.0" encoding="utf-8"?>
<launch>

<arg name="node_name" default="ShamNav"/>
<arg name="scenario_params" default="grizzly_demo"/>
<arg name="feature_type" default="surf"/>
<arg name="robot_type" default="grizzly"/>
<arg name="planner_type" default="distance"/>
<arg name="location" default="ethier"/>
<arg name="data_dir" default=""/>
<arg name="override_data_dir" default="false"/>

<node pkg="vtr_navigation" type="Navigator" name="$(arg node_name)"
      launch-prefix="$(optenv PRIORITIZE nice -n -5)" output="screen">
    <!--launch-prefix="$(optenv PRIORITIZE nice -n -5)"-->
    <!--launch-prefix="gdb -ex run - -args"-->
    <!--launch-prefix="valgrind - -leak-check=full"-->
    <!--launch-prefix="valgrind - -tool=callgrind - -toggle-collect='*CollaborativeLandmarksModule::run*'"-->

    <remap from="/in/rig_images" to="/babel_PtR/processed_images"/>
    <remap from="/in/calibration_client" to="/babel/rig_calibration"/>
    <remap from="~/in/joy" to="/xbox_joy"/>

    <!-- Tactic parameters -->
    <rosparam command="load" file="$(find vtr_navigation)/param/base/tactic.yaml"/>
    <rosparam command="load" file="$(find vtr_navigation)/param/$(arg robot_type)/tactic.yaml"/>

    <!-- Planner parameters -->
    <param name="planner/type" value="$(arg planner_type)"/>
    <rosparam command="load" ns="planner" file="$(find asrl__navigation)/param/base/planner/$(arg planner_type).yaml"/>

    <!--Default map parameters-->
    <rosparam command="load" ns="map/default" file="$(find asrl__navigation)/param/locations/$(arg location).yaml"/>

    <!--########################################################################
    Image Converter Assembly
    #########################################################################-->
    <param name="converter/type" value="converter"/>
    <rosparam param="converter/modules">
      [
      "extraction",
      "triangulation",
      ]
    </rosparam>

    <!-- conversion module params -->
    <rosparam command="load" ns="converter/conversion" file="$(find vtr_navigation)/param/base/converter/image_conversion.yaml"/>
    <rosparam command="load" ns="converter/conversion" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/image_conversion.yaml"/>

    <!-- extraction module params -->
    <rosparam command="load" ns="converter/extraction" file="$(find vtr_navigation)/param/base/converter/extraction_$(arg feature_type).yaml"/>
    <rosparam command="load" ns="converter/extraction" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/extraction_$(arg feature_type).yaml"/>

    <!-- triangulation module params -->
    <rosparam command="load" ns="converter/triangulation" file="$(find vtr_navigation)/param/base/converter/image_triangulation.yaml"/>
    <rosparam command="load" ns="converter/triangulation" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/image_triangulation.yaml"/>
    
    <!--########################################################################
    Quick VO Assembly
    #########################################################################-->
    <param name="quick_vo/type" value="quick_vo"/>
    <rosparam param="quick_vo/modules">
        [
         "recall",
         "matcher",
         "ransac",
         "steam",
         <!--"quickvo_ros_publisher",-->
         "vertex_test"]
    </rosparam>

    <!-- recall module params -->
    <param name="quick_vo/recall/type" value="landmark_recall"/>
    <param name="quick_vo/recall/landmark_source" value="live"/>
    <param name="quick_vo/recall/landmark_matches" value="false"/>

    <!-- frame-frame matcher module params -->
    <rosparam command="load" ns="quick_vo/matcher" file="$(find vtr_navigation)/param/base/quick_vo/ASRL_stereo_matcher.yaml"/>
    <rosparam command="load" ns="quick_vo/matcher" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/ASRL_stereo_matcher.yaml"/>

    <!-- frame-frame ransac module params -->
    <rosparam command="load" ns="quick_vo/ransac" file="$(find vtr_navigation)/param/base/quick_vo/stereo_ransac.yaml"/>
    <rosparam command="load" ns="quick_vo/ransac" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/stereo_ransac.yaml"/>

    <!-- keyframed steam module params -->
    <rosparam command="load" ns="quick_vo/steam" file="$(find vtr_navigation)/param/base/quick_vo/keyframe_opt.yaml"/>
    <rosparam command="load" ns="quick_vo/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/keyframe_opt.yaml"/>

    <!-- ros publisher module params -->
    <!-- <rosparam command="load" ns="quick_vo/quickvo_ros_publisher" file="$(find vtr_navigation)/param/base/quick_vo/ros_publisher.yaml"/>
    <rosparam command="load" ns="quick_vo/quickvo_ros_publisher" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/ros_publisher.yaml"/> -->

    <!-- vertex test module params -->
    <rosparam command="load" ns="quick_vo/vertex_test" file="$(find vtr_navigation)/param/base/quick_vo/vertex_test.yaml"/>
    <rosparam command="load" ns="quick_vo/vertex_test" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/vertex_test.yaml"/>

    <!--########################################################################
    Refined VO Assembly
    #########################################################################-->
    <param name="refined_vo/type" value="refined_vo"/>
    <rosparam param="refined_vo/modules">
      [
       "recall",
       <!--"exp_recog",-->
       "steam",
       <!--"refinedvo_ros_publisher"-->
      ]
    </rosparam>

    <!-- recall module params -->
    <param name="refined_vo/recall/type" value="windowed_recall"/>
    <param name="refined_vo/recall/window_size" value="5"/>
	  <param name="refined_vo/recall/landmark_matches" value="false"/>

    <!-- experience recognition module params -->
    <rosparam command="load" ns="refined_vo/exp_recog" file="$(find vtr_navigation)/param/base/refined_vo/experience_recognition.yaml"/>

    <!-- windowed steam module params -->
    <rosparam command="load" ns="refined_vo/steam" file="$(find vtr_navigation)/param/base/refined_vo/window_opt.yaml"/>
    <rosparam command="load" ns="refined_vo/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/refined_vo/window_opt.yaml"/>
    
    <!-- ros publisher module params -->
    <!-- <rosparam command="load" ns="refined_vo/refinedvo_ros_publisher" file="$(find vtr_navigation)/param/base/refined_vo/ros_publisher.yaml"/>
    <rosparam command="load" ns="refined_vo/refinedvo_ros_publisher" file="$(find vtr_navigation)/param/$(arg robot_type)/refined_vo/ros_publisher.yaml"/> -->

    <!--########################################################################
    Localization Assembly
    #########################################################################-->
    <param name="loc/type" value="localizer"/>
    <rosparam param="loc/modules">
      [
      "extraction",
      "recall",
      "collab_landmarks",
      "tod_recog",
      "rand_exp",
      "exp_triage",
      "migration",
      "matcher",
      "ransac",
      "steam",
      <!--"loc_ros_publisher"-->
      ]
    </rosparam>

    <!-- extraction module params -->
    <rosparam command="load" ns="loc/extraction" file="$(find vtr_navigation)/param/base/localization/map_extraction.yaml"/>
    <rosparam command="load" ns="loc/extraction" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/map_extraction.yaml"/>

    <!-- collaborative landmarks module params -->
    <rosparam command="load" ns="loc/collab_landmarks" file="$(find vtr_navigation)/param/base/localization/collaborative_landmarks.yaml"/>

    <!-- time-of-day experience selection module params -->
    <rosparam command="load" ns="loc/tod_recog" file="$(find vtr_navigation)/param/base/localization/time_of_day_recognition.yaml"/>

    <!-- experience triage module params -->
    <param name="loc/rand_exp/type" value="random_experiences"/>
    <param name="loc/rand_exp/verbose" value="false"/>
    <param name="loc/rand_exp/in_the_loop" value="true"/>
    <param name="loc/rand_exp/num_desired_experiences" value="10"/>

    <!-- experience triage module params -->
    <param name="loc/exp_triage/type" value="experience_triage"/>
    <param name="loc/exp_triage/verbose" value="false"/>
    <param name="loc/exp_triage/in_the_loop" value="true"/>
    <param name="loc/exp_triage/always_privileged" value="true"/>

    <!-- migration module params -->
    <param name="loc/migration/type" value="landmark_migration"/>

    <!-- recall module params -->
    <param name="loc/recall/type" value="landmark_recall"/>
    <param name="loc/recall/landmark_source" value="live"/>
    <param name="loc/recall/landmark_matches" value="true"/>

    <!-- matcher module params -->
    <rosparam command="load" ns="loc/matcher" file="$(find vtr_navigation)/param/base/localization/mel_matcher.yaml"/>
    <rosparam command="load" ns="loc/matcher" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_matcher.yaml"/>

    <!-- ransac module params -->
    <rosparam command="load" ns="loc/ransac" file="$(find vtr_navigation)/param/base/localization/stereo_ransac.yaml"/>
    <rosparam command="load" ns="loc/ransac" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/stereo_ransac.yaml"/>

    <!-- steam module params -->
    <rosparam command="load" ns="loc/steam" file="$(find vtr_navigation)/param/base/localization/mel_opt.yaml"/>
    <rosparam command="load" ns="loc/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_opt.yaml"/>

    <!-- ros publisher module params -->
    <!-- <rosparam command="load" ns="loc/loc_ros_publisher" file="$(find vtr_navigation)/param/base/localization/ros_publisher.yaml"/>
    <rosparam command="load" ns="loc/loc_ros_publisher" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/ros_publisher.yaml"/> -->

    <!-- results module params -->
    <rosparam command="load" ns="loc/results" file="$(find vtr_navigation)/param/base/localization/mel_results.yaml"/>
    <rosparam command="load" ns="loc/results" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_results.yaml"/>

    <!-- User parameters -->
    <rosparam command="load" file="$(find vtr_navigation)/param/scenarios/$(arg scenario_params).yaml"/>
    <param name="data_dir" value="$(arg data_dir)" if="$(arg override_data_dir)"/>
</node>
</launch>
