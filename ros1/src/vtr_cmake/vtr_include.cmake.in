#################################################################################
# CMake module path
#################################################################################
# The value of CMAKE_CURRENT_LIST_DIR is blown away when we return to the main
# CMakeLists.txt, so it is explicitly stored in a variable here.
set(ASRL_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR})
if(EXISTS "${ASRL_CMAKE_DIR}/cmake")
  set(CMAKE_MODULE_PATH ${ASRL_CMAKE_DIR}/cmake ${CMAKE_MODULE_PATH})
endif()

#################################################################################
# Cache variables
#################################################################################

# Enable/disable catkin export
# set(CATKIN_ENABLED "TRUE" CACHE BOOL "Catkin will export package information (for use with ROS)")
option(CATKIN_ENABLED "Catkin will export package information (for use with ROS)" ON)
# Enable.disable cuda compilation
# set(CUDA_REQUESTED TRUE CACHE BOOL "Do you really want to build CUDA?")
option(CUDA_REQUESTED "Do you want to build CUDA?" ON)

## TODO: remove the following
#################################################################################
# Policies for CMake 3+ to not complain
#################################################################################

# if(NOT CMAKE_MAJOR_VERSION LESS 3)
#   cmake_policy(SET CMP0046 OLD)
#   cmake_policy(SET CMP0048 OLD)
# endif()

#################################################################################
# Compiler-specific setup
#################################################################################

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")

  # Turn on as many warnings as possible by default.
  add_compile_options(-march=native -pthread -Wall -Wextra)

  # TODO bug in eigen
  add_definitions(-DEIGEN_DONT_VECTORIZE=1)
  add_definitions(-DEIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT=1)

  # TODO for now allow PROJ deprecated syntax
  add_compile_definitions(ACCEPT_USE_OF_DEPRECATED_PROJ_API_H)

  # TODO for now turn off some warnings (TODO: this should be an empty list)
  add_compile_options(-Wno-unused-function -Wno-unused-variable -Wno-virtual-move-assign -Wno-terminate -Wno-deprecated-declarations -Wno-pragmas)

  ## Compile as C++17, supported in ROS Kinetic and newer
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  # set(CXX11 TRUE) # This is needed to set CUDA

  # this flag is required otherwise we get a confusing runtime error at robochunk.
  # TODO: figure out why this happens
  link_libraries(stdc++fs)

  # Fix for eigen 3 alignment problem (TODO: should be fixed with c++17?)
  add_compile_definitions(
    EIGEN_DONT_VECTORIZE
    EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT
    EIGEN_MAX_STATIC_ALIGN_BYTES=0
  )

  ## Check which version of Ubuntu we are using (14.04 = trusty, 16.04 = xenial)
  # execute_process(
  #     COMMAND lsb_release -cs
  #     OUTPUT_VARIABLE RELEASE_CODENAME
  #     OUTPUT_STRIP_TRAILING_WHITESPACE
  # )

  ## There are way too many warnings as errors problems on system headers for
  ## 16.04/xenial so we have to add this as a compile option only if using
  ## 14.04/trusty
  # if(${RELEASE_CODENAME} MATCHES "trusty")
  #   add_compile_options(-Werror)
  # endif()

  ## ...except for these ones.  They are EVERYWHERE, and aren't actually that useful/important
  # add_compile_options(-Wno-long-long -Wno-unused-function -Wno-reorder -Wno-unused-parameter)
  add_compile_options(-Wno-expansion-to-defined -Wno-unused-parameter -Wno-reorder)

  ## we suck at template instantiation. Help pls
  # add_compile_options(-frepo)

  ## info please, why does the build suck?
  # add_compile_options(-ftime-report -fmem-report)

  ## address sanitizer
  # add_compile_options(-fsanitize=address)
  # set(CMAKE_CXX_STANDARD_LIBRARIES -lasan)

else()
  message(
      FATAL_ERROR
      "Your compiler (${CMAKE_C_COMPILER}) is not supported; please use GCC."
  )
endif()


#################################################################################
# Easylogging config flags
#################################################################################

find_package(easyloggingpp REQUIRED)
include_directories(${easyloggingpp_INCLUDE_DIRS})

# Disable loggings (use if needed)
# SET(EASYLOGGING_FLAGS "-DELPP_DISABLE_LOGS")

# Disable crash handling so that we get the true crash reason.
SET(EASYLOGGING_FLAGS "${EASYLOGGING_FLAGS} -DELPP_DISABLE_DEFAULT_CRASH_HANDLING")

# Thread safety is required
SET(EASYLOGGING_FLAGS "${EASYLOGGING_FLAGS} -DELPP_THREAD_SAFE -DELPP_STACKTRACE_ON_CRASH")

# Uncomment to enable logging of STL containers
# SET(EASYLOGGING_FLAGS "${EASYLOGGING_FLAGS} -DELPP_STL_LOGGING -DELPP_LOG_STD_ARRAY -DELPP_LOG_STD_UNORDERED_MAP -DELPP_LOG_STD_UNORDERED_SET")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EASYLOGGING_FLAGS}")


#################################################################################
# Setup for OpenMP, after the package has been included
#################################################################################
function(set_openmp_flags)
  if(${OPENMP_FOUND})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" PARENT_SCOPE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" PARENT_SCOPE)
    message(STATUS "FOUND: OPENMP")
  else(${OPENMP_FOUND})
    message(STATUS "WARNING: OPENMP NOT FOUND - MULTICORE PERFORMANCE IS MUCH BETTER!")
  endif(${OPENMP_FOUND})
endfunction(set_openmp_flags)


#################################################################################
# Handles enabling logic for CUDA
#################################################################################
function(set_cuda_flags)
  if(${CUDA_FOUND} AND ${CUDA_REQUESTED})
    set(CUDA_ENABLED TRUE PARENT_SCOPE)
    message(STATUS "CUDA enabled.")
  else()
    set(CUDA_ENABLED FALSE PARENT_SCOPE)
    message(STATUS "CUDA not requested/available.")
  endif()
endfunction(set_cuda_flags)
