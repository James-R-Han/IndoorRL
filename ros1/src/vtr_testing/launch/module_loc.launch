<?xml version="1.0" encoding="utf-8"?>
<launch>
  <!--Run and data params-->
  <arg name="scenario_params"/>
  <!--Feature Types: orb, surf-->
  <arg name="feature_type"/>
  <!--Robot Types: grizzly, trex, lancaster. Leave blank for none-->
  <arg name="robot_type"/>
  <!--Launch Prefix-->
  <arg name="launch_prefix" default=""/>
  <!--Debug mode-->
  <arg name="debug"/>
  
  <!-- To profile, use this line after the roslaunch:
      $ launch_prefix:="valgrind - -tool=callgrind  - -instr-atstart=no"
      (because xml comments suck, you have to remove the space from "- -")
      and this line to start profiling (in a second terminal)
      $ callgrind_control -i on
  -->
  
  <!-- Module Loc node -->
  <arg name="node_name" default="module_loc"/>
  <group ns="module_loc">

    <!--########################################################################
    Miscellaneous Parameters
    #########################################################################-->
  
    <!-- tactic, memory manager and localization chain params -->
    <rosparam command="load" file="$(find vtr_navigation)/param/base/tactic.yaml"/>
    <rosparam command="load" file="$(find vtr_navigation)/param/$(arg robot_type)/tactic.yaml"/>

    <!--########################################################################
    Data Conversion Assembly
    #########################################################################-->
    <param name="converter/type" value="converter"/>
    <rosparam param="converter/modules">
      [
      "extraction",
      "triangulation"
      ]
    </rosparam>
    
    <!-- conversion module params -->
    <rosparam command="load" ns="converter/conversion" file="$(find vtr_navigation)/param/base/converter/image_conversion.yaml"/>
    <rosparam command="load" ns="converter/conversion" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/image_conversion.yaml"/>
    
    <!-- extraction module params -->
    <rosparam command="load" ns="converter/extraction" file="$(find vtr_navigation)/param/base/converter/extraction_$(arg feature_type).yaml"/>
    <rosparam command="load" ns="converter/extraction" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/extraction_$(arg feature_type).yaml"/>
    
    <!-- triangulation module params -->
    <rosparam command="load" ns="converter/triangulation" file="$(find vtr_navigation)/param/base/converter/image_triangulation.yaml"/>
    <rosparam command="load" ns="converter/triangulation" file="$(find vtr_navigation)/param/$(arg robot_type)/converter/image_triangulation.yaml"/>

    <!--########################################################################
    Quick VO Assembly
    #########################################################################-->
    <param name="quick_vo/type" value="quick_vo"/>
    <rosparam param="quick_vo/modules">
        [
         "recall",
         "matcher",
         "ransac",
         "steam",
         "vertex_test"]
    </rosparam>

    <!-- recall module params -->
    <param name="quick_vo/recall/type" value="landmark_recall"/>
      <param name="quick_vo/recall/landmark_source" value="live"/>
    
    <!-- frame-frame matcher module params -->
    <rosparam command="load" ns="quick_vo/matcher" file="$(find vtr_navigation)/param/base/quick_vo/ASRL_stereo_matcher.yaml"/>
    <rosparam command="load" ns="quick_vo/matcher" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/ASRL_stereo_matcher.yaml"/>
    
    <!-- frame-frame ransac module params -->
    <rosparam command="load" ns="quick_vo/ransac" file="$(find vtr_navigation)/param/base/quick_vo/stereo_ransac.yaml"/>
    <rosparam command="load" ns="quick_vo/ransac" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/stereo_ransac.yaml"/>
    
    <!-- keyframed steam module params -->
    <rosparam command="load" ns="quick_vo/steam" file="$(find vtr_navigation)/param/base/quick_vo/keyframe_opt.yaml"/>
    <rosparam command="load" ns="quick_vo/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/keyframe_opt.yaml"/>
    
    <!-- vertex test module params -->
    <rosparam command="load" ns="quick_vo/vertex_test" file="$(find vtr_navigation)/param/base/quick_vo/vertex_test.yaml"/>
    <rosparam command="load" ns="quick_vo/vertex_test" file="$(find vtr_navigation)/param/$(arg robot_type)/quick_vo/vertex_test.yaml"/>

    <!--########################################################################
    Refined VO Assembly
    #########################################################################-->
    <param name="refined_vo/type" value="refined_vo"/>
    <rosparam param="refined_vo/modules">
      [
      "recall",
      "steam"
      ]
    </rosparam>

    <!-- recall module params -->
    <param name="refined_vo/recall/type" value="windowed_recall"/>
    <param name="refined_vo/recall/window_size" value="5"/>
    
    <!-- experience recognition module params -->
    <!-- <rosparam command="load" ns="refined_vo/tod_recog" file="$(find vtr_navigation)/param/base/refined_vo/time_of_day_recognition.yaml"/>
    <rosparam command="load" ns="refined_vo/exp_recog" file="$(find vtr_navigation)/param/base/refined_vo/experience_recognition.yaml"/> -->

    <!-- windowed steam module params -->
    <rosparam command="load" ns="refined_vo/steam" file="$(find vtr_navigation)/param/base/refined_vo/window_opt.yaml"/>
    <rosparam command="load" ns="refined_vo/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/refined_vo/window_opt.yaml"/>

    <!--########################################################################
    Localization Assembly
    #########################################################################-->
    <param name="loc/type" value="localizer"/>
    <rosparam param="loc/modules">
      [
      "extraction",
      "recall",
      "migration",
      "matcher",
      "ransac",
      "steam",
      "results"
      ]
    </rosparam>
    
    <!-- extraction module params -->
    <rosparam command="load" ns="loc/extraction" file="$(find vtr_navigation)/param/base/localization/map_extraction.yaml"/>
    <rosparam command="load" ns="loc/extraction" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/map_extraction.yaml"/>
    
    <!-- migration module params -->
    <param name="loc/migration/type" value="landmark_migration"/>
    
    <!-- recall module params -->
    <param name="loc/recall/type" value="landmark_recall"/>
    <param name="loc/recall/landmark_source" value="live"/>

    <!-- matcher module params -->
    <rosparam command="load" ns="loc/matcher" file="$(find vtr_navigation)/param/base/localization/mel_matcher.yaml"/>
    <rosparam command="load" ns="loc/matcher" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_matcher.yaml"/>
    
    <!-- ransac module params -->
    <rosparam command="load" ns="loc/ransac" file="$(find vtr_navigation)/param/base/localization/stereo_ransac.yaml"/>
    <rosparam command="load" ns="loc/ransac" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/stereo_ransac.yaml"/>
    
    <!-- steam module params -->
    <rosparam command="load" ns="loc/steam" file="$(find vtr_navigation)/param/base/localization/mel_opt.yaml"/>
    <rosparam command="load" ns="loc/steam" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_opt.yaml"/>
    
    <!-- results module params -->
    <rosparam command="load" ns="loc/results" file="$(find vtr_navigation)/param/base/localization/mel_results.yaml"/>
    <rosparam command="load" ns="loc/results" file="$(find vtr_navigation)/param/$(arg robot_type)/localization/mel_results.yaml"/>

    <!-- User parameters (these get loaded last, as they override any specific settings applied in the base or robot-specific params -->
    <rosparam command="load" file="$(find vtr_testing)/param/scenarios/$(arg scenario_params).yaml"/>
  </group>

</launch>
