# Gaussian time of day falloff: p(loc) ~ exp(-0.5 * (now - run_time)**2 / alpha**2)
# time_falloff > 0
time_falloff: 0.5

# Exponential age falloff: p(loc) ~ exp(-alpha * days_elapsed)
# days_falloff > 0
days_falloff: 0.20

# The maximum probability of localizing against a run
# 0 < max_contribution <= 1
max_contribution: 0.95

# Smooth the costs out by distance: cost = (1 - alpha) * NLL(loc) + alpha.
# 0 <= smoothing <= 1
smoothing: 0.1

# Maximum number of runs to use in cost calculation
# max_runs > 0
max_runs: 5

# Maximum cache age in minutes
max_cache_age: 5

# Timezone offset
utc_offset: -5

# Invert the planner to find runs that are aging
invert: true
