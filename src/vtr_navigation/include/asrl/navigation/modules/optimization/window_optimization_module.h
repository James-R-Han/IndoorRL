#pragma once

// LGMath and Steam
#include <lgmath.hpp>
#include <steam.hpp>

#include <asrl/navigation/modules/base_module.h>
#include <asrl/navigation/modules/optimization/steam_module.h>

namespace asrl {
namespace navigation {

/** \brief Reject outliers and estimate a preliminary transform
 */
class WindowOptimizationModule : public SteamModule {
 public:
  static constexpr auto type_str_ = "window_optimization";

  struct Config : SteamModule::Config {
    bool depth_prior_enable;
    double depth_prior_weight;
  };

  WindowOptimizationModule() : SteamModule() {
    LOG(INFO) << "Constructing window module";
  }

  /** \brief Update the graph with optimized transforms
   */
  virtual void updateGraph(QueryCache &, MapCache &mdata,
                           const std::shared_ptr<Graph> &graph, VertexId);

  void setConfig(std::shared_ptr<Config> &config);

 protected:
  /** \brief Given two frames, builds a sensor specific optimization problem.
   */
  virtual std::shared_ptr<steam::OptimizationProblem>
  generateOptimizationProblem(QueryCache &qdata, MapCache &mdata,
                              const std::shared_ptr<const Graph> &graph);

  virtual void updateCaches(QueryCache &qdata, MapCache &);

 private:
  /** \brief samples and saves the optimized trajectory and stores it in the
   * latest vertex.
   */
  void saveTrajectory(QueryCache &qdata, MapCache &mdata,
                      const std::shared_ptr<Graph> &graph);

  /** \brief Initializes the problem based on an initial condition.
   */
  void resetProblem();

  /** \brief Adds a depth cost associated with this landmark to the depth cost
   * terms.
   *
   * \param The landmark in question.
   */
  void addDepthCost(steam::se3::LandmarkStateVar::Ptr landmark);

  /** \brief Verifies the input data being used in the optimization problem,
   * namely, the inlier matches and initial estimate.
   *
   * \param The query data.
   * \param The map data.
   */
  virtual bool verifyInputData(QueryCache &qdata, MapCache &mdata);

  /** \brief Verifies the output data generated byt the optimization problem
   *
   * \param The query data.
   * \param The map data.
   */
  virtual bool verifyOutputData(QueryCache &qdata, MapCache &mdata);

  /** \brief performs sanity checks on the landmark
   *
   * \param The landmark.
   * \return true if the landmark meets all checks, false otherwise.
   */
  bool isLandmarkValid(const Eigen::Vector3d &point, MapCache &mdata);

  /** \brief the cost terms associated with landmark observations.
   */
  steam::ParallelizedCostTermCollection::Ptr cost_terms_;

  /** \brief The cost terms associated with landmark depth.
   */
  steam::ParallelizedCostTermCollection::Ptr depth_cost_terms_;

  /** \brief The loss function used for the depth cost.
   */
  steam::LossFunctionBase::Ptr sharedDepthLossFunc_;

  /** \brief the loss function assicated with observation cost.
   */
  steam::LossFunctionBase::Ptr sharedLossFunc_;

  /** \brief The steam problem.
   */
  std::shared_ptr<steam::OptimizationProblem> problem_;

  /** \brief Algorithm Configuration
   */
  std::shared_ptr<Config> config_;
};

}  // namespace navigation
}  // namespace asrl
