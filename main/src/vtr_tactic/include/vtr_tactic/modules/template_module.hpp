// Copyright 2021, Autonomous Space Robotics Lab (ASRL)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * \file template_module.hpp
 * \author Yuchen Wu, Autonomous Space Robotics Lab (ASRL)
 * \brief TemplateModule class definition
 */
#pragma once

#include "vtr_tactic/modules/base_module.hpp"
/// include this header in cpp file if this module launches other modules
// #include "vtr_tactic/modules/factory.hpp"
/// \todo should include this in cpp file instead of header file, but include it
/// here simplifies the type names a little bit
/// include this header in cpp file if using the task queue
#include "vtr_tactic/task_queue.hpp"

namespace vtr {
namespace tactic {

/** \brief A tactic module template */
class TemplateModule : public BaseModule {
 public:
  /** \brief Static module identifier. */
  static constexpr auto static_name = "template";

  /** \brief Collection of config parameters */
  struct Config : public BaseModule::Config {
    using Ptr = std::shared_ptr<Config>;
    using ConstPtr = std::shared_ptr<const Config>;

    std::string parameter = "default value";

    static ConstPtr fromROS(const rclcpp::Node::SharedPtr &node,
                            const std::string &param_prefix) {
      /// Get ROS parameters here
      auto config = std::make_shared<Config>();
      // clang-format off
      config->parameter = node->declare_parameter<std::string>(param_prefix + ".parameter", config->parameter);
      // clang-format on
      CLOG(INFO, "tactic.module")
          << "Template module parameter set to: " << config->parameter;
      return config;
    }
  };

  TemplateModule(const Config::ConstPtr &config,
                 const std::shared_ptr<ModuleFactory> &module_factory = nullptr,
                 const std::string &name = static_name)
      : BaseModule{module_factory, name}, config_(config) {}

 private:
  void runImpl(QueryCache &qdata, OutputCache &, const Graph::Ptr &,
               const std::shared_ptr<TaskExecutor> &executor) override {
    /// Pure virtual method that must be overriden.
    /// Do the actual work of your module. Load data from and store data to
    /// QueryCache.
    CLOG(INFO, "tactic.module")
        << "Running the template module with parameter: " << config_->parameter;
    /// You can use the executor to run some task later in a non-blocking way.
    /// Task constructor accepts a priority, a dependency ID of this task (uuid)
    /// and a set of dependencies (uuid) that this task depends on.
    /// The dependency ID is auto-generated by default, keep track of it in case
    /// your subsequent task depends on it.
    if (executor != nullptr)
      executor->dispatch(
          std::make_shared<Task>(shared_from_this(), qdata.shared_from_this()));
  }

  void runAsyncImpl(QueryCache &, OutputCache &, const Graph::Ptr &,
                    const TaskExecutor::Ptr &, const Task::Priority &priority,
                    const Task::DepId &dep_id) override {
    /// Task that runs asynchronously.
    CLOG(INFO, "tactic.module")
        << "Running the async part of template module with priority: "
        << priority << " and dependency id: " << dep_id;
  }

  /** \brief Module configuration. */
  Config::ConstPtr config_;

  VTR_REGISTER_MODULE_DEC_TYPE(TemplateModule);
};

}  // namespace tactic
}  // namespace vtr